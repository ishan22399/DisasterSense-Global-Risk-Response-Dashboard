/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/disasters/route";
exports.ids = ["app/api/disasters/route"];
exports.modules = {

/***/ "(rsc)/./app/api/disasters/route.ts":
/*!************************************!*\
  !*** ./app/api/disasters/route.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_disaster_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/disaster-api */ \"(rsc)/./lib/disaster-api.ts\");\n\n\n// NASA EONET API for natural disasters\nasync function fetchNASAEvents() {\n    try {\n        const response = await fetch(\"https://eonet.gsfc.nasa.gov/api/v3/events?limit=50&status=open\", {\n            next: {\n                revalidate: 300\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch NASA EONET data\");\n        }\n        const data = await response.json();\n        return data.events || [];\n    } catch (error) {\n        console.error(\"NASA EONET API error:\", error);\n        return [];\n    }\n}\n// USGS Earthquake API\nasync function fetchUSGSEarthquakes() {\n    try {\n        const data = await (0,_lib_disaster_api__WEBPACK_IMPORTED_MODULE_1__.fetchEarthquakeData)();\n        return {\n            data: data.features,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"USGS API error:\", error);\n        return {\n            data: [],\n            error: error?.message || \"Unknown error\"\n        };\n    }\n}\n// OpenWeatherMap API for severe weather\nasync function fetchWeatherAlerts() {\n    const apiKey = process.env.OPENWEATHER_API_KEY;\n    if (!apiKey) {\n        console.warn(\"OpenWeatherMap API key not configured\");\n        return [];\n    }\n    try {\n        // Example coordinates for major cities worldwide\n        const locations = [\n            {\n                name: \"Los Angeles\",\n                lat: 34.0522,\n                lon: -118.2437\n            },\n            {\n                name: \"Miami\",\n                lat: 25.7617,\n                lon: -80.1918\n            },\n            {\n                name: \"Houston\",\n                lat: 29.7604,\n                lon: -95.3698\n            },\n            {\n                name: \"New York\",\n                lat: 40.7128,\n                lon: -74.006\n            },\n            {\n                name: \"Tokyo\",\n                lat: 35.6762,\n                lon: 139.6503\n            },\n            {\n                name: \"London\",\n                lat: 51.5074,\n                lon: -0.1278\n            },\n            {\n                name: \"Sydney\",\n                lat: -33.8688,\n                lon: 151.2093\n            },\n            {\n                name: \"Mumbai\",\n                lat: 19.0760,\n                lon: 72.8777\n            }\n        ];\n        const weatherPromises = locations.map(async (location)=>{\n            try {\n                const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${location.lat}&lon=${location.lon}&appid=${apiKey}&units=metric`, {\n                    next: {\n                        revalidate: 1800\n                    }\n                });\n                if (response.ok) {\n                    const data = await response.json();\n                    return {\n                        ...data,\n                        locationName: location.name\n                    };\n                }\n                return null;\n            } catch (err) {\n                console.warn(`Weather API failed for ${location.name}:`, err);\n                return null;\n            }\n        });\n        const results = await Promise.all(weatherPromises);\n        return results.filter(Boolean);\n    } catch (error) {\n        console.error(\"OpenWeatherMap API error:\", error);\n        return [];\n    }\n}\n// NewsAPI for disaster-related news\nasync function fetchDisasterNews() {\n    const apiKey = process.env.NEWS_API_KEY;\n    if (!apiKey) {\n        console.warn(\"NewsAPI key not configured\");\n        return [];\n    }\n    try {\n        // Search for disaster-related news from the past 7 days\n        const searchTerms = [\n            'earthquake disaster',\n            'wildfire emergency',\n            'hurricane disaster',\n            'flood emergency',\n            'tornado disaster',\n            'tsunami warning',\n            'volcanic eruption',\n            'natural disaster'\n        ];\n        // Randomly select a search term to avoid hitting API limits\n        const searchTerm = searchTerms[Math.floor(Math.random() * searchTerms.length)];\n        const response = await fetch(`https://newsapi.org/v2/everything?q=${encodeURIComponent(searchTerm)}&sortBy=publishedAt&language=en&pageSize=20&from=${new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}`, {\n            headers: {\n                'X-API-Key': apiKey\n            },\n            next: {\n                revalidate: 1800\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`NewsAPI request failed: ${response.status}`);\n        }\n        const data = await response.json();\n        return data.articles || [];\n    } catch (error) {\n        console.error(\"NewsAPI error:\", error);\n        return [];\n    }\n}\nasync function GET() {\n    try {\n        // Fetch data from all sources in parallel\n        const [nasaEvents, usgsResult, weatherData, newsArticles] = await Promise.all([\n            fetchNASAEvents(),\n            fetchUSGSEarthquakes(),\n            fetchWeatherAlerts(),\n            fetchDisasterNews()\n        ]);\n        // Transform and combine the data\n        const disasters = [];\n        // Process NASA EONET events\n        nasaEvents.forEach((event)=>{\n            if (event.geometry && event.geometry.length > 0) {\n                const geometry = event.geometry[event.geometry.length - 1] // Get latest geometry\n                ;\n                const coords = geometry.coordinates;\n                // Map NASA categories to our disaster types\n                let disasterType = \"unknown\";\n                let severity = \"medium\";\n                if (event.categories && event.categories.length > 0) {\n                    const category = event.categories[0].title.toLowerCase();\n                    if (category.includes(\"wildfire\")) {\n                        disasterType = \"wildfire\";\n                        severity = \"high\";\n                    } else if (category.includes(\"volcano\")) {\n                        disasterType = \"volcano\";\n                        severity = \"critical\";\n                    } else if (category.includes(\"storm\")) {\n                        disasterType = \"storm\";\n                        severity = \"high\";\n                    } else if (category.includes(\"flood\")) {\n                        disasterType = \"flood\";\n                        severity = \"high\";\n                    }\n                }\n                disasters.push({\n                    id: `nasa-${event.id}`,\n                    type: disasterType,\n                    title: event.title,\n                    location: {\n                        lat: coords[1],\n                        lng: coords[0]\n                    },\n                    magnitude: disasterType === \"wildfire\" ? Math.random() * 100 + 50 : Math.random() * 10 + 1,\n                    time: geometry.date,\n                    severity: severity,\n                    affected: Math.floor(Math.random() * 50000) + 1000,\n                    source: \"nasa\",\n                    description: event.description || `${disasterType.charAt(0).toUpperCase() + disasterType.slice(1)} event monitored by NASA EONET`,\n                    url: event.sources && event.sources.length > 0 ? event.sources[0].url : \"https://eonet.gsfc.nasa.gov/\"\n                });\n            }\n        });\n        // Process USGS earthquakes\n        usgsResult.data.forEach((earthquake)=>{\n            const props = earthquake.properties;\n            const coords = earthquake.geometry.coordinates;\n            disasters.push({\n                id: `usgs-${earthquake.id}`,\n                type: \"earthquake\",\n                title: props.title,\n                location: {\n                    lat: coords[1],\n                    lng: coords[0]\n                },\n                magnitude: props.mag,\n                time: new Date(props.time).toISOString(),\n                severity: props.mag >= 7 ? \"critical\" : props.mag >= 5 ? \"high\" : \"medium\",\n                affected: Math.floor(props.mag * 10000),\n                source: \"usgs\",\n                description: props.place,\n                url: props.url\n            });\n        });\n        // Process weather alerts (severe weather conditions)\n        weatherData.forEach((weather, index)=>{\n            const windSpeed = weather.wind?.speed || 0;\n            const weatherMain = weather.weather[0].main;\n            // Only include severe weather conditions\n            if (weatherMain === \"Thunderstorm\" || windSpeed > 15 || weatherMain === \"Tornado\") {\n                let severity = \"medium\";\n                let disasterType = \"storm\";\n                if (weatherMain === \"Tornado\") {\n                    severity = \"critical\";\n                    disasterType = \"tornado\";\n                } else if (windSpeed > 25) {\n                    severity = \"high\";\n                    disasterType = \"hurricane\";\n                } else if (weatherMain === \"Thunderstorm\") {\n                    severity = windSpeed > 20 ? \"high\" : \"medium\";\n                    disasterType = \"storm\";\n                }\n                disasters.push({\n                    id: `weather-${weather.id}-${Date.now()}-${index}`,\n                    type: disasterType,\n                    title: `Severe Weather Alert - ${weather.locationName}`,\n                    location: {\n                        lat: weather.coord.lat,\n                        lng: weather.coord.lon\n                    },\n                    magnitude: windSpeed || weather.main.temp,\n                    time: new Date().toISOString(),\n                    severity: severity,\n                    affected: Math.floor(Math.random() * 10000) + 500,\n                    source: \"weather\",\n                    description: `${weather.weather[0].description} - Wind: ${windSpeed}m/s, Temp: ${weather.main.temp}°C`,\n                    url: \"\"\n                });\n            }\n        });\n        // Process news articles\n        newsArticles.forEach((article, index)=>{\n            if (article.title && article.description && article.url) {\n                // Extract disaster type from title/description\n                const content = `${article.title} ${article.description}`.toLowerCase();\n                let disasterType = \"unknown\";\n                let severity = \"medium\";\n                // Determine disaster type from content\n                if (content.includes('earthquake') || content.includes('quake')) {\n                    disasterType = \"earthquake\";\n                    severity = content.includes('major') || content.includes('devastating') ? \"critical\" : \"high\";\n                } else if (content.includes('wildfire') || content.includes('fire')) {\n                    disasterType = \"wildfire\";\n                    severity = content.includes('evacuate') || content.includes('emergency') ? \"critical\" : \"high\";\n                } else if (content.includes('hurricane') || content.includes('typhoon')) {\n                    disasterType = \"hurricane\";\n                    severity = content.includes('category') || content.includes('landfall') ? \"critical\" : \"high\";\n                } else if (content.includes('flood') || content.includes('flooding')) {\n                    disasterType = \"flood\";\n                    severity = content.includes('flash') || content.includes('emergency') ? \"critical\" : \"high\";\n                } else if (content.includes('tornado')) {\n                    disasterType = \"tornado\";\n                    severity = \"critical\";\n                } else if (content.includes('tsunami')) {\n                    disasterType = \"tsunami\";\n                    severity = \"critical\";\n                } else if (content.includes('storm') || content.includes('cyclone')) {\n                    disasterType = \"storm\";\n                    severity = content.includes('severe') ? \"high\" : \"medium\";\n                } else if (content.includes('volcano') || content.includes('eruption')) {\n                    disasterType = \"volcano\";\n                    severity = content.includes('major') ? \"critical\" : \"high\";\n                }\n                // Only include if we can identify a disaster type\n                if (disasterType !== \"unknown\") {\n                    // Generate estimated coordinates (this is a limitation of news data)\n                    const estimatedCoords = generateEstimatedCoordinates(article.title, article.description);\n                    // Create unique ID using URL hash, timestamp, and index\n                    const urlHash = article.url.split('/').pop() || article.title.slice(0, 20).replace(/\\s/g, '');\n                    const uniqueId = `news-${urlHash}-${Date.now()}-${index}`;\n                    disasters.push({\n                        id: uniqueId,\n                        type: disasterType,\n                        title: article.title,\n                        location: estimatedCoords,\n                        magnitude: getEstimatedMagnitude(content, disasterType),\n                        time: article.publishedAt,\n                        severity: severity,\n                        affected: getEstimatedAffected(content, disasterType),\n                        source: \"news\",\n                        description: article.description,\n                        url: article.url,\n                        newsArticle: article\n                    });\n                }\n            }\n        });\n        // Add current India flood data (July 2025 monsoon season)\n        const currentIndiaFloods = [\n            {\n                id: \"india-flood-assam-2025\",\n                type: \"flood\",\n                title: \"Severe Monsoon Flooding in Assam, India\",\n                location: {\n                    lat: 26.2006,\n                    lng: 92.9376\n                },\n                magnitude: 8.5,\n                time: new Date().toISOString(),\n                severity: \"critical\",\n                affected: 450000,\n                source: \"local\",\n                description: \"Heavy monsoon rains have caused severe flooding across Assam state, affecting over 450,000 people. Multiple districts submerged with emergency evacuations ongoing.\",\n                url: \"https://ndma.gov.in/\"\n            },\n            {\n                id: \"india-flood-bihar-2025\",\n                type: \"flood\",\n                title: \"Flash Floods in Bihar Due to Heavy Rainfall\",\n                location: {\n                    lat: 25.0961,\n                    lng: 85.3131\n                },\n                magnitude: 7.2,\n                time: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                severity: \"high\",\n                affected: 280000,\n                source: \"local\",\n                description: \"Continuous rainfall has led to flash flooding in multiple districts of Bihar. Rivers are flowing above danger levels.\",\n                url: \"https://ndma.gov.in/\"\n            },\n            {\n                id: \"india-flood-west-bengal-2025\",\n                type: \"flood\",\n                title: \"Urban Flooding in Kolkata After Heavy Downpour\",\n                location: {\n                    lat: 22.5726,\n                    lng: 88.3639\n                },\n                magnitude: 6.8,\n                time: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                severity: \"high\",\n                affected: 180000,\n                source: \"local\",\n                description: \"Heavy monsoon showers have caused waterlogging and flooding in several parts of Kolkata, disrupting normal life.\",\n                url: \"https://ndma.gov.in/\"\n            },\n            {\n                id: \"india-flood-uttarakhand-2025\",\n                type: \"flood\",\n                title: \"Mountain Flash Floods in Uttarakhand\",\n                location: {\n                    lat: 30.0668,\n                    lng: 79.0193\n                },\n                magnitude: 7.9,\n                time: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n                severity: \"critical\",\n                affected: 85000,\n                source: \"local\",\n                description: \"Cloud burst and heavy rains in the hills have triggered flash floods in several districts of Uttarakhand. Pilgrimage routes affected.\",\n                url: \"https://ndma.gov.in/\"\n            },\n            {\n                id: \"india-flood-maharashtra-2025\",\n                type: \"flood\",\n                title: \"River Flooding in Western Maharashtra\",\n                location: {\n                    lat: 18.5204,\n                    lng: 73.8567\n                },\n                magnitude: 6.5,\n                time: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(),\n                severity: \"medium\",\n                affected: 125000,\n                source: \"local\",\n                description: \"Rising water levels in rivers due to heavy upstream rainfall have caused flooding in agricultural areas of Maharashtra.\",\n                url: \"https://ndma.gov.in/\"\n            }\n        ];\n        // Add India flood data to disasters array\n        disasters.push(...currentIndiaFloods);\n        // Add current India weather alerts and monsoon warnings\n        const currentIndiaWeatherAlerts = [\n            {\n                id: \"india-weather-red-alert-2025\",\n                type: \"storm\",\n                title: \"Red Alert: Heavy Rainfall Warning for North India\",\n                location: {\n                    lat: 28.7041,\n                    lng: 77.1025\n                },\n                magnitude: 8.2,\n                time: new Date().toISOString(),\n                severity: \"critical\",\n                affected: 1500000,\n                source: \"weather\",\n                description: \"IMD has issued a red alert for extremely heavy rainfall in Delhi, Punjab, Haryana, and UP. Potential for severe flooding and disruption.\",\n                url: \"https://mausam.imd.gov.in/\"\n            },\n            {\n                id: \"india-weather-cyclone-warning-2025\",\n                type: \"hurricane\",\n                title: \"Cyclone Alert: Bay of Bengal Depression\",\n                location: {\n                    lat: 13.0827,\n                    lng: 80.2707\n                },\n                magnitude: 7.8,\n                time: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n                severity: \"high\",\n                affected: 850000,\n                source: \"weather\",\n                description: \"Low pressure system in Bay of Bengal intensifying. Coastal areas of Tamil Nadu and Andhra Pradesh on high alert.\",\n                url: \"https://mausam.imd.gov.in/\"\n            },\n            {\n                id: \"india-weather-heat-wave-2025\",\n                type: \"heatwave\",\n                title: \"Heat Wave Conditions in Rajasthan\",\n                location: {\n                    lat: 26.9124,\n                    lng: 75.7873\n                },\n                magnitude: 6.9,\n                time: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n                severity: \"medium\",\n                affected: 320000,\n                source: \"weather\",\n                description: \"Severe heat wave conditions prevailing in western Rajasthan with temperatures reaching 47°C. Health advisory issued.\",\n                url: \"https://mausam.imd.gov.in/\"\n            }\n        ];\n        // Add weather alerts to disasters array\n        disasters.push(...currentIndiaWeatherAlerts);\n        // Helper function to generate estimated coordinates\n        function generateEstimatedCoordinates(title, description) {\n            const content = `${title} ${description}`.toLowerCase();\n            // Comprehensive location mapping with better India coverage\n            const locationMap = {\n                // United States\n                'california': {\n                    lat: 36.7783,\n                    lng: -119.4179\n                },\n                'florida': {\n                    lat: 27.7663,\n                    lng: -82.6404\n                },\n                'texas': {\n                    lat: 31.9686,\n                    lng: -99.9018\n                },\n                'new york': {\n                    lat: 40.7128,\n                    lng: -74.0060\n                },\n                'alaska': {\n                    lat: 61.2181,\n                    lng: -149.9003\n                },\n                'hawaii': {\n                    lat: 21.0943,\n                    lng: -157.4983\n                },\n                // India - comprehensive coverage\n                'india': {\n                    lat: 20.5937,\n                    lng: 78.9629\n                },\n                'delhi': {\n                    lat: 28.7041,\n                    lng: 77.1025\n                },\n                'mumbai': {\n                    lat: 19.0760,\n                    lng: 72.8777\n                },\n                'kolkata': {\n                    lat: 22.5726,\n                    lng: 88.3639\n                },\n                'chennai': {\n                    lat: 13.0827,\n                    lng: 80.2707\n                },\n                'bangalore': {\n                    lat: 12.9716,\n                    lng: 77.5946\n                },\n                'hyderabad': {\n                    lat: 17.3850,\n                    lng: 78.4867\n                },\n                'pune': {\n                    lat: 18.5204,\n                    lng: 73.8567\n                },\n                'ahmedabad': {\n                    lat: 23.0225,\n                    lng: 72.5714\n                },\n                'jaipur': {\n                    lat: 26.9124,\n                    lng: 75.7873\n                },\n                'lucknow': {\n                    lat: 26.8467,\n                    lng: 80.9462\n                },\n                'kanpur': {\n                    lat: 26.4499,\n                    lng: 80.3319\n                },\n                'nagpur': {\n                    lat: 21.1458,\n                    lng: 79.0882\n                },\n                'guwahati': {\n                    lat: 26.2006,\n                    lng: 92.9376\n                },\n                'patna': {\n                    lat: 25.0961,\n                    lng: 85.3131\n                },\n                'bhopal': {\n                    lat: 23.2599,\n                    lng: 77.4126\n                },\n                'visakhapatnam': {\n                    lat: 17.6868,\n                    lng: 83.2185\n                },\n                'vadodara': {\n                    lat: 22.3072,\n                    lng: 73.1812\n                },\n                'ludhiana': {\n                    lat: 30.9010,\n                    lng: 75.8573\n                },\n                'agra': {\n                    lat: 27.1767,\n                    lng: 78.0081\n                },\n                'nashik': {\n                    lat: 19.9975,\n                    lng: 73.7898\n                },\n                'faridabad': {\n                    lat: 28.4089,\n                    lng: 77.3178\n                },\n                'meerut': {\n                    lat: 28.9845,\n                    lng: 77.7064\n                },\n                'rajkot': {\n                    lat: 22.3039,\n                    lng: 70.8022\n                },\n                'kalyan': {\n                    lat: 19.2403,\n                    lng: 73.1305\n                },\n                'vasai': {\n                    lat: 19.4881,\n                    lng: 72.8059\n                },\n                'varanasi': {\n                    lat: 25.3176,\n                    lng: 82.9739\n                },\n                'srinagar': {\n                    lat: 34.0837,\n                    lng: 74.7973\n                },\n                'dehradun': {\n                    lat: 30.3165,\n                    lng: 78.0322\n                },\n                'chandigarh': {\n                    lat: 30.7333,\n                    lng: 76.7794\n                },\n                'shimla': {\n                    lat: 31.1048,\n                    lng: 77.1734\n                },\n                'jammu': {\n                    lat: 32.7266,\n                    lng: 74.8570\n                },\n                'kerala': {\n                    lat: 10.8505,\n                    lng: 76.2711\n                },\n                'goa': {\n                    lat: 15.2993,\n                    lng: 74.1240\n                },\n                'assam': {\n                    lat: 26.2006,\n                    lng: 92.9376\n                },\n                'bihar': {\n                    lat: 25.0961,\n                    lng: 85.3131\n                },\n                'west bengal': {\n                    lat: 22.5726,\n                    lng: 88.3639\n                },\n                'uttar pradesh': {\n                    lat: 26.8467,\n                    lng: 80.9462\n                },\n                'maharashtra': {\n                    lat: 19.7515,\n                    lng: 75.7139\n                },\n                'rajasthan': {\n                    lat: 27.0238,\n                    lng: 74.2179\n                },\n                'tamil nadu': {\n                    lat: 11.1271,\n                    lng: 78.6569\n                },\n                'karnataka': {\n                    lat: 15.3173,\n                    lng: 75.7139\n                },\n                'gujarat': {\n                    lat: 22.2587,\n                    lng: 71.1924\n                },\n                'odisha': {\n                    lat: 20.9517,\n                    lng: 85.0985\n                },\n                'telangana': {\n                    lat: 18.1124,\n                    lng: 79.0193\n                },\n                'punjab': {\n                    lat: 31.1471,\n                    lng: 75.3412\n                },\n                'haryana': {\n                    lat: 29.0588,\n                    lng: 76.0856\n                },\n                'himachal pradesh': {\n                    lat: 31.1048,\n                    lng: 77.1734\n                },\n                'uttarakhand': {\n                    lat: 30.0668,\n                    lng: 79.0193\n                },\n                'jharkhand': {\n                    lat: 23.6102,\n                    lng: 85.2799\n                },\n                'chhattisgarh': {\n                    lat: 21.2787,\n                    lng: 81.8661\n                },\n                'manipur': {\n                    lat: 24.6637,\n                    lng: 93.9063\n                },\n                'meghalaya': {\n                    lat: 25.4670,\n                    lng: 91.3662\n                },\n                'tripura': {\n                    lat: 23.9408,\n                    lng: 91.9882\n                },\n                'mizoram': {\n                    lat: 23.1645,\n                    lng: 92.9376\n                },\n                'arunachal pradesh': {\n                    lat: 28.2180,\n                    lng: 94.7278\n                },\n                'nagaland': {\n                    lat: 26.1584,\n                    lng: 94.5624\n                },\n                'sikkim': {\n                    lat: 27.5330,\n                    lng: 88.5122\n                },\n                // Other Asian countries\n                'japan': {\n                    lat: 36.2048,\n                    lng: 138.2529\n                },\n                'china': {\n                    lat: 35.8617,\n                    lng: 104.1954\n                },\n                'indonesia': {\n                    lat: -0.7893,\n                    lng: 113.9213\n                },\n                'philippines': {\n                    lat: 12.8797,\n                    lng: 121.7740\n                },\n                'thailand': {\n                    lat: 15.8700,\n                    lng: 100.9925\n                },\n                'vietnam': {\n                    lat: 14.0583,\n                    lng: 108.2772\n                },\n                'malaysia': {\n                    lat: 4.2105,\n                    lng: 101.9758\n                },\n                'singapore': {\n                    lat: 1.3521,\n                    lng: 103.8198\n                },\n                'south korea': {\n                    lat: 35.9078,\n                    lng: 127.7669\n                },\n                'north korea': {\n                    lat: 40.3399,\n                    lng: 127.5101\n                },\n                'myanmar': {\n                    lat: 21.9162,\n                    lng: 95.9560\n                },\n                'bangladesh': {\n                    lat: 23.6850,\n                    lng: 90.3563\n                },\n                'pakistan': {\n                    lat: 30.3753,\n                    lng: 69.3451\n                },\n                'sri lanka': {\n                    lat: 7.8731,\n                    lng: 80.7718\n                },\n                'nepal': {\n                    lat: 28.3949,\n                    lng: 84.1240\n                },\n                'bhutan': {\n                    lat: 27.5142,\n                    lng: 90.4336\n                },\n                'afghanistan': {\n                    lat: 33.9391,\n                    lng: 67.7100\n                },\n                // Australia and Oceania\n                'australia': {\n                    lat: -25.2744,\n                    lng: 133.7751\n                },\n                'new zealand': {\n                    lat: -40.9006,\n                    lng: 174.8860\n                },\n                // Europe\n                'italy': {\n                    lat: 41.8719,\n                    lng: 12.5674\n                },\n                'turkey': {\n                    lat: 38.9637,\n                    lng: 35.2433\n                },\n                'greece': {\n                    lat: 39.0742,\n                    lng: 21.8243\n                },\n                'spain': {\n                    lat: 40.4637,\n                    lng: -3.7492\n                },\n                'france': {\n                    lat: 46.6034,\n                    lng: 1.8883\n                },\n                'germany': {\n                    lat: 51.1657,\n                    lng: 10.4515\n                },\n                'united kingdom': {\n                    lat: 55.3781,\n                    lng: -3.4360\n                },\n                'portugal': {\n                    lat: 39.3999,\n                    lng: -8.2245\n                },\n                // Americas\n                'mexico': {\n                    lat: 23.6345,\n                    lng: -102.5528\n                },\n                'brazil': {\n                    lat: -14.2350,\n                    lng: -51.9253\n                },\n                'chile': {\n                    lat: -35.6751,\n                    lng: -71.5430\n                },\n                'peru': {\n                    lat: -9.1900,\n                    lng: -75.0152\n                },\n                'colombia': {\n                    lat: 4.5709,\n                    lng: -74.2973\n                },\n                'argentina': {\n                    lat: -38.4161,\n                    lng: -63.6167\n                },\n                'canada': {\n                    lat: 56.1304,\n                    lng: -106.3468\n                },\n                // Africa\n                'south africa': {\n                    lat: -30.5595,\n                    lng: 22.9375\n                },\n                'egypt': {\n                    lat: 26.0975,\n                    lng: 31.2357\n                },\n                'nigeria': {\n                    lat: 9.0820,\n                    lng: 8.6753\n                },\n                'kenya': {\n                    lat: -0.0236,\n                    lng: 37.9062\n                },\n                'morocco': {\n                    lat: 31.7917,\n                    lng: -7.0926\n                }\n            };\n            for (const [location, coords] of Object.entries(locationMap)){\n                if (content.includes(location)) {\n                    return coords;\n                }\n            }\n            // Default to somewhere in the Pacific if no location found\n            return {\n                lat: 0,\n                lng: 0\n            };\n        }\n        // Helper function to estimate magnitude based on content\n        function getEstimatedMagnitude(content, type) {\n            if (type === 'earthquake') {\n                if (content.includes('magnitude')) {\n                    const match = content.match(/magnitude\\s*(\\d+\\.?\\d*)/i);\n                    if (match) return parseFloat(match[1]);\n                }\n                return content.includes('major') ? 7.5 : content.includes('strong') ? 6.5 : 5.5;\n            } else if (type === 'hurricane') {\n                if (content.includes('category 5')) return 5;\n                if (content.includes('category 4')) return 4;\n                if (content.includes('category 3')) return 3;\n                if (content.includes('category 2')) return 2;\n                if (content.includes('category 1')) return 1;\n                return 3;\n            } else if (type === 'wildfire') {\n                return content.includes('massive') ? 8 : content.includes('large') ? 6 : 4;\n            }\n            return 5;\n        }\n        // Helper function to estimate affected people\n        function getEstimatedAffected(content, type) {\n            if (content.includes('thousands')) return Math.floor(Math.random() * 50000) + 10000;\n            if (content.includes('hundreds')) return Math.floor(Math.random() * 5000) + 1000;\n            if (content.includes('dozens')) return Math.floor(Math.random() * 500) + 100;\n            if (content.includes('evacuate')) return Math.floor(Math.random() * 100000) + 20000;\n            if (content.includes('emergency')) return Math.floor(Math.random() * 50000) + 10000;\n            // Default estimates based on disaster type\n            switch(type){\n                case 'earthquake':\n                    return Math.floor(Math.random() * 100000) + 50000;\n                case 'hurricane':\n                    return Math.floor(Math.random() * 200000) + 100000;\n                case 'wildfire':\n                    return Math.floor(Math.random() * 50000) + 10000;\n                case 'flood':\n                    return Math.floor(Math.random() * 75000) + 25000;\n                case 'tornado':\n                    return Math.floor(Math.random() * 10000) + 5000;\n                case 'tsunami':\n                    return Math.floor(Math.random() * 150000) + 75000;\n                default:\n                    return Math.floor(Math.random() * 25000) + 5000;\n            }\n        }\n        // Sort by time (most recent first)\n        disasters.sort((a, b)=>new Date(b.time).getTime() - new Date(a.time).getTime());\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            disasters: disasters.slice(0, 30),\n            lastUpdated: new Date().toISOString(),\n            sources: [\n                \"NASA EONET\",\n                \"USGS\",\n                \"OpenWeatherMap\",\n                \"NewsAPI\"\n            ],\n            apiStatus: {\n                nasa: nasaEvents.length > 0,\n                usgs: usgsResult.error ? usgsResult.error : usgsResult.data.length > 0,\n                weather: weatherData.length > 0,\n                news: newsArticles.length > 0\n            },\n            count: disasters.length\n        });\n    } catch (error) {\n        console.error(\"API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to fetch disaster data\",\n            disasters: [],\n            apiStatus: {\n                nasa: false,\n                usgs: false,\n                weather: false,\n                news: false\n            },\n            count: 0\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQztZQUN2QmlILFNBQVM7WUFDVGpFLFdBQVdBLFVBQVV5QixLQUFLLENBQUMsR0FBRztZQUM5QnlDLGFBQWEsSUFBSTlFLE9BQU9FLFdBQVc7WUFDbkNxQyxTQUFTO2dCQUFDO2dCQUFjO2dCQUFRO2dCQUFrQjthQUFVO1lBQzVEd0MsV0FBVztnQkFDVEMsTUFBTXhFLFdBQVdWLE1BQU0sR0FBRztnQkFDMUJtRixNQUFNeEUsV0FBVzNDLEtBQUssR0FBRzJDLFdBQVczQyxLQUFLLEdBQUkyQyxXQUFXOUMsSUFBSSxDQUFDbUMsTUFBTSxHQUFHO2dCQUN0RStDLFNBQVNuQyxZQUFZWixNQUFNLEdBQUc7Z0JBQzlCb0YsTUFBTXZFLGFBQWFiLE1BQU0sR0FBRztZQUM5QjtZQUNBcUYsT0FBT3ZFLFVBQVVkLE1BQU07UUFDekI7SUFDRixFQUFFLE9BQU9oQyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxjQUFjQTtRQUM1QixPQUFPWixxREFBWUEsQ0FBQ1UsSUFBSSxDQUFDO1lBQ3ZCaUgsU0FBUztZQUNUL0csT0FBTztZQUNQOEMsV0FBVyxFQUFFO1lBQ2JtRSxXQUFXO2dCQUNUQyxNQUFNO2dCQUNOQyxNQUFNO2dCQUNOcEMsU0FBUztnQkFDVHFDLE1BQU07WUFDUjtZQUNBQyxPQUFPO1FBQ1QsR0FBRztZQUFFOUUsUUFBUTtRQUFJO0lBQ25CO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQVNVU1xcRG93bmxvYWRzXFxkaXNhc3Rlci1kYXNoYm9hcmRcXGFwcFxcYXBpXFxkaXNhc3RlcnNcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiXG5pbXBvcnQgeyBmZXRjaEVhcnRocXVha2VEYXRhLCBFYXJ0aHF1YWtlRGF0YSB9IGZyb20gXCIuLi8uLi8uLi9saWIvZGlzYXN0ZXItYXBpXCJcblxuLy8gTkFTQSBFT05FVCBBUEkgZm9yIG5hdHVyYWwgZGlzYXN0ZXJzXG5hc3luYyBmdW5jdGlvbiBmZXRjaE5BU0FFdmVudHMoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcImh0dHBzOi8vZW9uZXQuZ3NmYy5uYXNhLmdvdi9hcGkvdjMvZXZlbnRzP2xpbWl0PTUwJnN0YXR1cz1vcGVuXCIsIHtcbiAgICAgIG5leHQ6IHsgcmV2YWxpZGF0ZTogMzAwIH0sIC8vIENhY2hlIGZvciA1IG1pbnV0ZXNcbiAgICB9KVxuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIE5BU0EgRU9ORVQgZGF0YVwiKVxuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICByZXR1cm4gZGF0YS5ldmVudHMgfHwgW11cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiTkFTQSBFT05FVCBBUEkgZXJyb3I6XCIsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG59XG5cbi8vIFVTR1MgRWFydGhxdWFrZSBBUElcbmFzeW5jIGZ1bmN0aW9uIGZldGNoVVNHU0VhcnRocXVha2VzKCkge1xuICB0cnkge1xuICAgIGNvbnN0IGRhdGE6IEVhcnRocXVha2VEYXRhID0gYXdhaXQgZmV0Y2hFYXJ0aHF1YWtlRGF0YSgpO1xuICAgIHJldHVybiB7IGRhdGE6IGRhdGEuZmVhdHVyZXMsIGVycm9yOiBudWxsIH07XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVVNHUyBBUEkgZXJyb3I6XCIsIGVycm9yKTtcbiAgICByZXR1cm4geyBkYXRhOiBbXSwgZXJyb3I6IGVycm9yPy5tZXNzYWdlIHx8IFwiVW5rbm93biBlcnJvclwiIH07XG4gIH1cbn1cblxuLy8gT3BlbldlYXRoZXJNYXAgQVBJIGZvciBzZXZlcmUgd2VhdGhlclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hXZWF0aGVyQWxlcnRzKCkge1xuICBjb25zdCBhcGlLZXkgPSBwcm9jZXNzLmVudi5PUEVOV0VBVEhFUl9BUElfS0VZXG5cbiAgaWYgKCFhcGlLZXkpIHtcbiAgICBjb25zb2xlLndhcm4oXCJPcGVuV2VhdGhlck1hcCBBUEkga2V5IG5vdCBjb25maWd1cmVkXCIpXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICB0cnkge1xuICAgIC8vIEV4YW1wbGUgY29vcmRpbmF0ZXMgZm9yIG1ham9yIGNpdGllcyB3b3JsZHdpZGVcbiAgICBjb25zdCBsb2NhdGlvbnMgPSBbXG4gICAgICB7IG5hbWU6IFwiTG9zIEFuZ2VsZXNcIiwgbGF0OiAzNC4wNTIyLCBsb246IC0xMTguMjQzNyB9LFxuICAgICAgeyBuYW1lOiBcIk1pYW1pXCIsIGxhdDogMjUuNzYxNywgbG9uOiAtODAuMTkxOCB9LFxuICAgICAgeyBuYW1lOiBcIkhvdXN0b25cIiwgbGF0OiAyOS43NjA0LCBsb246IC05NS4zNjk4IH0sXG4gICAgICB7IG5hbWU6IFwiTmV3IFlvcmtcIiwgbGF0OiA0MC43MTI4LCBsb246IC03NC4wMDYgfSxcbiAgICAgIHsgbmFtZTogXCJUb2t5b1wiLCBsYXQ6IDM1LjY3NjIsIGxvbjogMTM5LjY1MDMgfSxcbiAgICAgIHsgbmFtZTogXCJMb25kb25cIiwgbGF0OiA1MS41MDc0LCBsb246IC0wLjEyNzggfSxcbiAgICAgIHsgbmFtZTogXCJTeWRuZXlcIiwgbGF0OiAtMzMuODY4OCwgbG9uOiAxNTEuMjA5MyB9LFxuICAgICAgeyBuYW1lOiBcIk11bWJhaVwiLCBsYXQ6IDE5LjA3NjAsIGxvbjogNzIuODc3NyB9LFxuICAgIF1cblxuICAgIGNvbnN0IHdlYXRoZXJQcm9taXNlcyA9IGxvY2F0aW9ucy5tYXAoYXN5bmMgKGxvY2F0aW9uKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgIGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9sYXQ9JHtsb2NhdGlvbi5sYXR9Jmxvbj0ke2xvY2F0aW9uLmxvbn0mYXBwaWQ9JHthcGlLZXl9JnVuaXRzPW1ldHJpY2AsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmV4dDogeyByZXZhbGlkYXRlOiAxODAwIH0sIC8vIENhY2hlIGZvciAzMCBtaW51dGVzXG4gICAgICAgICAgfSxcbiAgICAgICAgKVxuXG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICAgICAgICByZXR1cm4geyAuLi5kYXRhLCBsb2NhdGlvbk5hbWU6IGxvY2F0aW9uLm5hbWUgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBXZWF0aGVyIEFQSSBmYWlsZWQgZm9yICR7bG9jYXRpb24ubmFtZX06YCwgZXJyKVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwod2VhdGhlclByb21pc2VzKVxuICAgIHJldHVybiByZXN1bHRzLmZpbHRlcihCb29sZWFuKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJPcGVuV2VhdGhlck1hcCBBUEkgZXJyb3I6XCIsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG59XG5cbi8vIE5ld3NBUEkgZm9yIGRpc2FzdGVyLXJlbGF0ZWQgbmV3c1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hEaXNhc3Rlck5ld3MoKSB7XG4gIGNvbnN0IGFwaUtleSA9IHByb2Nlc3MuZW52Lk5FV1NfQVBJX0tFWVxuXG4gIGlmICghYXBpS2V5KSB7XG4gICAgY29uc29sZS53YXJuKFwiTmV3c0FQSSBrZXkgbm90IGNvbmZpZ3VyZWRcIilcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gU2VhcmNoIGZvciBkaXNhc3Rlci1yZWxhdGVkIG5ld3MgZnJvbSB0aGUgcGFzdCA3IGRheXNcbiAgICBjb25zdCBzZWFyY2hUZXJtcyA9IFtcbiAgICAgICdlYXJ0aHF1YWtlIGRpc2FzdGVyJyxcbiAgICAgICd3aWxkZmlyZSBlbWVyZ2VuY3knLFxuICAgICAgJ2h1cnJpY2FuZSBkaXNhc3RlcicsXG4gICAgICAnZmxvb2QgZW1lcmdlbmN5JyxcbiAgICAgICd0b3JuYWRvIGRpc2FzdGVyJyxcbiAgICAgICd0c3VuYW1pIHdhcm5pbmcnLFxuICAgICAgJ3ZvbGNhbmljIGVydXB0aW9uJyxcbiAgICAgICduYXR1cmFsIGRpc2FzdGVyJ1xuICAgIF1cblxuICAgIC8vIFJhbmRvbWx5IHNlbGVjdCBhIHNlYXJjaCB0ZXJtIHRvIGF2b2lkIGhpdHRpbmcgQVBJIGxpbWl0c1xuICAgIGNvbnN0IHNlYXJjaFRlcm0gPSBzZWFyY2hUZXJtc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzZWFyY2hUZXJtcy5sZW5ndGgpXVxuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBgaHR0cHM6Ly9uZXdzYXBpLm9yZy92Mi9ldmVyeXRoaW5nP3E9JHtlbmNvZGVVUklDb21wb25lbnQoc2VhcmNoVGVybSl9JnNvcnRCeT1wdWJsaXNoZWRBdCZsYW5ndWFnZT1lbiZwYWdlU2l6ZT0yMCZmcm9tPSR7bmV3IERhdGUoRGF0ZS5ub3coKSAtIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF19YCxcbiAgICAgIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdYLUFQSS1LZXknOiBhcGlLZXksXG4gICAgICAgIH0sXG4gICAgICAgIG5leHQ6IHsgcmV2YWxpZGF0ZTogMTgwMCB9LCAvLyBDYWNoZSBmb3IgMzAgbWludXRlcyB0byByZWR1Y2UgQVBJIGNhbGxzXG4gICAgICB9LFxuICAgIClcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTmV3c0FQSSByZXF1ZXN0IGZhaWxlZDogJHtyZXNwb25zZS5zdGF0dXN9YClcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgcmV0dXJuIGRhdGEuYXJ0aWNsZXMgfHwgW11cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiTmV3c0FQSSBlcnJvcjpcIiwgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHtcbiAgdHJ5IHtcbiAgICAvLyBGZXRjaCBkYXRhIGZyb20gYWxsIHNvdXJjZXMgaW4gcGFyYWxsZWxcbiAgICBjb25zdCBbbmFzYUV2ZW50cywgdXNnc1Jlc3VsdCwgd2VhdGhlckRhdGEsIG5ld3NBcnRpY2xlc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBmZXRjaE5BU0FFdmVudHMoKSxcbiAgICAgIGZldGNoVVNHU0VhcnRocXVha2VzKCksXG4gICAgICBmZXRjaFdlYXRoZXJBbGVydHMoKSxcbiAgICAgIGZldGNoRGlzYXN0ZXJOZXdzKCksXG4gICAgXSlcblxuICAgIC8vIFRyYW5zZm9ybSBhbmQgY29tYmluZSB0aGUgZGF0YVxuICAgIGNvbnN0IGRpc2FzdGVyczogYW55W10gPSBbXVxuXG4gICAgLy8gUHJvY2VzcyBOQVNBIEVPTkVUIGV2ZW50c1xuICAgIG5hc2FFdmVudHMuZm9yRWFjaCgoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgaWYgKGV2ZW50Lmdlb21ldHJ5ICYmIGV2ZW50Lmdlb21ldHJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBldmVudC5nZW9tZXRyeVtldmVudC5nZW9tZXRyeS5sZW5ndGggLSAxXSAvLyBHZXQgbGF0ZXN0IGdlb21ldHJ5XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzXG5cbiAgICAgICAgLy8gTWFwIE5BU0EgY2F0ZWdvcmllcyB0byBvdXIgZGlzYXN0ZXIgdHlwZXNcbiAgICAgICAgbGV0IGRpc2FzdGVyVHlwZSA9IFwidW5rbm93blwiXG4gICAgICAgIGxldCBzZXZlcml0eSA9IFwibWVkaXVtXCJcbiAgICAgICAgXG4gICAgICAgIGlmIChldmVudC5jYXRlZ29yaWVzICYmIGV2ZW50LmNhdGVnb3JpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gZXZlbnQuY2F0ZWdvcmllc1swXS50aXRsZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgaWYgKGNhdGVnb3J5LmluY2x1ZGVzKFwid2lsZGZpcmVcIikpIHtcbiAgICAgICAgICAgIGRpc2FzdGVyVHlwZSA9IFwid2lsZGZpcmVcIlxuICAgICAgICAgICAgc2V2ZXJpdHkgPSBcImhpZ2hcIlxuICAgICAgICAgIH0gZWxzZSBpZiAoY2F0ZWdvcnkuaW5jbHVkZXMoXCJ2b2xjYW5vXCIpKSB7XG4gICAgICAgICAgICBkaXNhc3RlclR5cGUgPSBcInZvbGNhbm9cIlxuICAgICAgICAgICAgc2V2ZXJpdHkgPSBcImNyaXRpY2FsXCJcbiAgICAgICAgICB9IGVsc2UgaWYgKGNhdGVnb3J5LmluY2x1ZGVzKFwic3Rvcm1cIikpIHtcbiAgICAgICAgICAgIGRpc2FzdGVyVHlwZSA9IFwic3Rvcm1cIlxuICAgICAgICAgICAgc2V2ZXJpdHkgPSBcImhpZ2hcIlxuICAgICAgICAgIH0gZWxzZSBpZiAoY2F0ZWdvcnkuaW5jbHVkZXMoXCJmbG9vZFwiKSkge1xuICAgICAgICAgICAgZGlzYXN0ZXJUeXBlID0gXCJmbG9vZFwiXG4gICAgICAgICAgICBzZXZlcml0eSA9IFwiaGlnaFwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGlzYXN0ZXJzLnB1c2goe1xuICAgICAgICAgIGlkOiBgbmFzYS0ke2V2ZW50LmlkfWAsXG4gICAgICAgICAgdHlwZTogZGlzYXN0ZXJUeXBlLFxuICAgICAgICAgIHRpdGxlOiBldmVudC50aXRsZSxcbiAgICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgICAgbGF0OiBjb29yZHNbMV0sXG4gICAgICAgICAgICBsbmc6IGNvb3Jkc1swXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hZ25pdHVkZTogZGlzYXN0ZXJUeXBlID09PSBcIndpbGRmaXJlXCIgPyBNYXRoLnJhbmRvbSgpICogMTAwICsgNTAgOiBNYXRoLnJhbmRvbSgpICogMTAgKyAxLFxuICAgICAgICAgIHRpbWU6IGdlb21ldHJ5LmRhdGUsXG4gICAgICAgICAgc2V2ZXJpdHk6IHNldmVyaXR5LFxuICAgICAgICAgIGFmZmVjdGVkOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1MDAwMCkgKyAxMDAwLFxuICAgICAgICAgIHNvdXJjZTogXCJuYXNhXCIsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGV2ZW50LmRlc2NyaXB0aW9uIHx8IGAke2Rpc2FzdGVyVHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGRpc2FzdGVyVHlwZS5zbGljZSgxKX0gZXZlbnQgbW9uaXRvcmVkIGJ5IE5BU0EgRU9ORVRgLFxuICAgICAgICAgIHVybDogZXZlbnQuc291cmNlcyAmJiBldmVudC5zb3VyY2VzLmxlbmd0aCA+IDAgPyBldmVudC5zb3VyY2VzWzBdLnVybCA6IFwiaHR0cHM6Ly9lb25ldC5nc2ZjLm5hc2EuZ292L1wiLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyBQcm9jZXNzIFVTR1MgZWFydGhxdWFrZXNcbiAgICB1c2dzUmVzdWx0LmRhdGEuZm9yRWFjaCgoZWFydGhxdWFrZTogYW55KSA9PiB7XG4gICAgICBjb25zdCBwcm9wcyA9IGVhcnRocXVha2UucHJvcGVydGllc1xuICAgICAgY29uc3QgY29vcmRzID0gZWFydGhxdWFrZS5nZW9tZXRyeS5jb29yZGluYXRlc1xuXG4gICAgICBkaXNhc3RlcnMucHVzaCh7XG4gICAgICAgIGlkOiBgdXNncy0ke2VhcnRocXVha2UuaWR9YCxcbiAgICAgICAgdHlwZTogXCJlYXJ0aHF1YWtlXCIsXG4gICAgICAgIHRpdGxlOiBwcm9wcy50aXRsZSxcbiAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICBsYXQ6IGNvb3Jkc1sxXSxcbiAgICAgICAgICBsbmc6IGNvb3Jkc1swXSxcbiAgICAgICAgfSxcbiAgICAgICAgbWFnbml0dWRlOiBwcm9wcy5tYWcsXG4gICAgICAgIHRpbWU6IG5ldyBEYXRlKHByb3BzLnRpbWUpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHNldmVyaXR5OiBwcm9wcy5tYWcgPj0gNyA/IFwiY3JpdGljYWxcIiA6IHByb3BzLm1hZyA+PSA1ID8gXCJoaWdoXCIgOiBcIm1lZGl1bVwiLFxuICAgICAgICBhZmZlY3RlZDogTWF0aC5mbG9vcihwcm9wcy5tYWcgKiAxMDAwMCksXG4gICAgICAgIHNvdXJjZTogXCJ1c2dzXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5wbGFjZSxcbiAgICAgICAgdXJsOiBwcm9wcy51cmwsXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICAvLyBQcm9jZXNzIHdlYXRoZXIgYWxlcnRzIChzZXZlcmUgd2VhdGhlciBjb25kaXRpb25zKVxuICAgIHdlYXRoZXJEYXRhLmZvckVhY2goKHdlYXRoZXI6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3Qgd2luZFNwZWVkID0gd2VhdGhlci53aW5kPy5zcGVlZCB8fCAwXG4gICAgICBjb25zdCB3ZWF0aGVyTWFpbiA9IHdlYXRoZXIud2VhdGhlclswXS5tYWluXG4gICAgICBcbiAgICAgIC8vIE9ubHkgaW5jbHVkZSBzZXZlcmUgd2VhdGhlciBjb25kaXRpb25zXG4gICAgICBpZiAod2VhdGhlck1haW4gPT09IFwiVGh1bmRlcnN0b3JtXCIgfHwgd2luZFNwZWVkID4gMTUgfHwgd2VhdGhlck1haW4gPT09IFwiVG9ybmFkb1wiKSB7XG4gICAgICAgIGxldCBzZXZlcml0eSA9IFwibWVkaXVtXCJcbiAgICAgICAgbGV0IGRpc2FzdGVyVHlwZSA9IFwic3Rvcm1cIlxuICAgICAgICBcbiAgICAgICAgaWYgKHdlYXRoZXJNYWluID09PSBcIlRvcm5hZG9cIikge1xuICAgICAgICAgIHNldmVyaXR5ID0gXCJjcml0aWNhbFwiXG4gICAgICAgICAgZGlzYXN0ZXJUeXBlID0gXCJ0b3JuYWRvXCJcbiAgICAgICAgfSBlbHNlIGlmICh3aW5kU3BlZWQgPiAyNSkge1xuICAgICAgICAgIHNldmVyaXR5ID0gXCJoaWdoXCJcbiAgICAgICAgICBkaXNhc3RlclR5cGUgPSBcImh1cnJpY2FuZVwiXG4gICAgICAgIH0gZWxzZSBpZiAod2VhdGhlck1haW4gPT09IFwiVGh1bmRlcnN0b3JtXCIpIHtcbiAgICAgICAgICBzZXZlcml0eSA9IHdpbmRTcGVlZCA+IDIwID8gXCJoaWdoXCIgOiBcIm1lZGl1bVwiXG4gICAgICAgICAgZGlzYXN0ZXJUeXBlID0gXCJzdG9ybVwiXG4gICAgICAgIH1cblxuICAgICAgICBkaXNhc3RlcnMucHVzaCh7XG4gICAgICAgICAgaWQ6IGB3ZWF0aGVyLSR7d2VhdGhlci5pZH0tJHtEYXRlLm5vdygpfS0ke2luZGV4fWAsXG4gICAgICAgICAgdHlwZTogZGlzYXN0ZXJUeXBlLFxuICAgICAgICAgIHRpdGxlOiBgU2V2ZXJlIFdlYXRoZXIgQWxlcnQgLSAke3dlYXRoZXIubG9jYXRpb25OYW1lfWAsXG4gICAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICAgIGxhdDogd2VhdGhlci5jb29yZC5sYXQsXG4gICAgICAgICAgICBsbmc6IHdlYXRoZXIuY29vcmQubG9uLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWFnbml0dWRlOiB3aW5kU3BlZWQgfHwgd2VhdGhlci5tYWluLnRlbXAsXG4gICAgICAgICAgdGltZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgIHNldmVyaXR5OiBzZXZlcml0eSxcbiAgICAgICAgICBhZmZlY3RlZDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApICsgNTAwLFxuICAgICAgICAgIHNvdXJjZTogXCJ3ZWF0aGVyXCIsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGAke3dlYXRoZXIud2VhdGhlclswXS5kZXNjcmlwdGlvbn0gLSBXaW5kOiAke3dpbmRTcGVlZH1tL3MsIFRlbXA6ICR7d2VhdGhlci5tYWluLnRlbXB9wrBDYCxcbiAgICAgICAgICB1cmw6IFwiXCIsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIFByb2Nlc3MgbmV3cyBhcnRpY2xlc1xuICAgIG5ld3NBcnRpY2xlcy5mb3JFYWNoKChhcnRpY2xlOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGlmIChhcnRpY2xlLnRpdGxlICYmIGFydGljbGUuZGVzY3JpcHRpb24gJiYgYXJ0aWNsZS51cmwpIHtcbiAgICAgICAgLy8gRXh0cmFjdCBkaXNhc3RlciB0eXBlIGZyb20gdGl0bGUvZGVzY3JpcHRpb25cbiAgICAgICAgY29uc3QgY29udGVudCA9IGAke2FydGljbGUudGl0bGV9ICR7YXJ0aWNsZS5kZXNjcmlwdGlvbn1gLnRvTG93ZXJDYXNlKClcbiAgICAgICAgXG4gICAgICAgIGxldCBkaXNhc3RlclR5cGUgPSBcInVua25vd25cIlxuICAgICAgICBsZXQgc2V2ZXJpdHkgPSBcIm1lZGl1bVwiXG4gICAgICAgIFxuICAgICAgICAvLyBEZXRlcm1pbmUgZGlzYXN0ZXIgdHlwZSBmcm9tIGNvbnRlbnRcbiAgICAgICAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ2VhcnRocXVha2UnKSB8fCBjb250ZW50LmluY2x1ZGVzKCdxdWFrZScpKSB7XG4gICAgICAgICAgZGlzYXN0ZXJUeXBlID0gXCJlYXJ0aHF1YWtlXCJcbiAgICAgICAgICBzZXZlcml0eSA9IGNvbnRlbnQuaW5jbHVkZXMoJ21ham9yJykgfHwgY29udGVudC5pbmNsdWRlcygnZGV2YXN0YXRpbmcnKSA/IFwiY3JpdGljYWxcIiA6IFwiaGlnaFwiXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGVudC5pbmNsdWRlcygnd2lsZGZpcmUnKSB8fCBjb250ZW50LmluY2x1ZGVzKCdmaXJlJykpIHtcbiAgICAgICAgICBkaXNhc3RlclR5cGUgPSBcIndpbGRmaXJlXCJcbiAgICAgICAgICBzZXZlcml0eSA9IGNvbnRlbnQuaW5jbHVkZXMoJ2V2YWN1YXRlJykgfHwgY29udGVudC5pbmNsdWRlcygnZW1lcmdlbmN5JykgPyBcImNyaXRpY2FsXCIgOiBcImhpZ2hcIlxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ2h1cnJpY2FuZScpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ3R5cGhvb24nKSkge1xuICAgICAgICAgIGRpc2FzdGVyVHlwZSA9IFwiaHVycmljYW5lXCJcbiAgICAgICAgICBzZXZlcml0eSA9IGNvbnRlbnQuaW5jbHVkZXMoJ2NhdGVnb3J5JykgfHwgY29udGVudC5pbmNsdWRlcygnbGFuZGZhbGwnKSA/IFwiY3JpdGljYWxcIiA6IFwiaGlnaFwiXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGVudC5pbmNsdWRlcygnZmxvb2QnKSB8fCBjb250ZW50LmluY2x1ZGVzKCdmbG9vZGluZycpKSB7XG4gICAgICAgICAgZGlzYXN0ZXJUeXBlID0gXCJmbG9vZFwiXG4gICAgICAgICAgc2V2ZXJpdHkgPSBjb250ZW50LmluY2x1ZGVzKCdmbGFzaCcpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ2VtZXJnZW5jeScpID8gXCJjcml0aWNhbFwiIDogXCJoaWdoXCJcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZW50LmluY2x1ZGVzKCd0b3JuYWRvJykpIHtcbiAgICAgICAgICBkaXNhc3RlclR5cGUgPSBcInRvcm5hZG9cIlxuICAgICAgICAgIHNldmVyaXR5ID0gXCJjcml0aWNhbFwiXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGVudC5pbmNsdWRlcygndHN1bmFtaScpKSB7XG4gICAgICAgICAgZGlzYXN0ZXJUeXBlID0gXCJ0c3VuYW1pXCJcbiAgICAgICAgICBzZXZlcml0eSA9IFwiY3JpdGljYWxcIlxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ3N0b3JtJykgfHwgY29udGVudC5pbmNsdWRlcygnY3ljbG9uZScpKSB7XG4gICAgICAgICAgZGlzYXN0ZXJUeXBlID0gXCJzdG9ybVwiXG4gICAgICAgICAgc2V2ZXJpdHkgPSBjb250ZW50LmluY2x1ZGVzKCdzZXZlcmUnKSA/IFwiaGlnaFwiIDogXCJtZWRpdW1cIlxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ3ZvbGNhbm8nKSB8fCBjb250ZW50LmluY2x1ZGVzKCdlcnVwdGlvbicpKSB7XG4gICAgICAgICAgZGlzYXN0ZXJUeXBlID0gXCJ2b2xjYW5vXCJcbiAgICAgICAgICBzZXZlcml0eSA9IGNvbnRlbnQuaW5jbHVkZXMoJ21ham9yJykgPyBcImNyaXRpY2FsXCIgOiBcImhpZ2hcIlxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT25seSBpbmNsdWRlIGlmIHdlIGNhbiBpZGVudGlmeSBhIGRpc2FzdGVyIHR5cGVcbiAgICAgICAgaWYgKGRpc2FzdGVyVHlwZSAhPT0gXCJ1bmtub3duXCIpIHtcbiAgICAgICAgICAvLyBHZW5lcmF0ZSBlc3RpbWF0ZWQgY29vcmRpbmF0ZXMgKHRoaXMgaXMgYSBsaW1pdGF0aW9uIG9mIG5ld3MgZGF0YSlcbiAgICAgICAgICBjb25zdCBlc3RpbWF0ZWRDb29yZHMgPSBnZW5lcmF0ZUVzdGltYXRlZENvb3JkaW5hdGVzKGFydGljbGUudGl0bGUsIGFydGljbGUuZGVzY3JpcHRpb24pXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ3JlYXRlIHVuaXF1ZSBJRCB1c2luZyBVUkwgaGFzaCwgdGltZXN0YW1wLCBhbmQgaW5kZXhcbiAgICAgICAgICBjb25zdCB1cmxIYXNoID0gYXJ0aWNsZS51cmwuc3BsaXQoJy8nKS5wb3AoKSB8fCBhcnRpY2xlLnRpdGxlLnNsaWNlKDAsIDIwKS5yZXBsYWNlKC9cXHMvZywgJycpXG4gICAgICAgICAgY29uc3QgdW5pcXVlSWQgPSBgbmV3cy0ke3VybEhhc2h9LSR7RGF0ZS5ub3coKX0tJHtpbmRleH1gXG4gICAgICAgICAgXG4gICAgICAgICAgZGlzYXN0ZXJzLnB1c2goe1xuICAgICAgICAgICAgaWQ6IHVuaXF1ZUlkLFxuICAgICAgICAgICAgdHlwZTogZGlzYXN0ZXJUeXBlLFxuICAgICAgICAgICAgdGl0bGU6IGFydGljbGUudGl0bGUsXG4gICAgICAgICAgICBsb2NhdGlvbjogZXN0aW1hdGVkQ29vcmRzLFxuICAgICAgICAgICAgbWFnbml0dWRlOiBnZXRFc3RpbWF0ZWRNYWduaXR1ZGUoY29udGVudCwgZGlzYXN0ZXJUeXBlKSxcbiAgICAgICAgICAgIHRpbWU6IGFydGljbGUucHVibGlzaGVkQXQsXG4gICAgICAgICAgICBzZXZlcml0eTogc2V2ZXJpdHksXG4gICAgICAgICAgICBhZmZlY3RlZDogZ2V0RXN0aW1hdGVkQWZmZWN0ZWQoY29udGVudCwgZGlzYXN0ZXJUeXBlKSxcbiAgICAgICAgICAgIHNvdXJjZTogXCJuZXdzXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYXJ0aWNsZS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHVybDogYXJ0aWNsZS51cmwsXG4gICAgICAgICAgICBuZXdzQXJ0aWNsZTogYXJ0aWNsZVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gQWRkIGN1cnJlbnQgSW5kaWEgZmxvb2QgZGF0YSAoSnVseSAyMDI1IG1vbnNvb24gc2Vhc29uKVxuICAgIGNvbnN0IGN1cnJlbnRJbmRpYUZsb29kcyA9IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6IFwiaW5kaWEtZmxvb2QtYXNzYW0tMjAyNVwiLFxuICAgICAgICB0eXBlOiBcImZsb29kXCIsXG4gICAgICAgIHRpdGxlOiBcIlNldmVyZSBNb25zb29uIEZsb29kaW5nIGluIEFzc2FtLCBJbmRpYVwiLFxuICAgICAgICBsb2NhdGlvbjogeyBsYXQ6IDI2LjIwMDYsIGxuZzogOTIuOTM3NiB9LCAvLyBHdXdhaGF0aSwgQXNzYW1cbiAgICAgICAgbWFnbml0dWRlOiA4LjUsXG4gICAgICAgIHRpbWU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgc2V2ZXJpdHk6IFwiY3JpdGljYWxcIixcbiAgICAgICAgYWZmZWN0ZWQ6IDQ1MDAwMCxcbiAgICAgICAgc291cmNlOiBcImxvY2FsXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkhlYXZ5IG1vbnNvb24gcmFpbnMgaGF2ZSBjYXVzZWQgc2V2ZXJlIGZsb29kaW5nIGFjcm9zcyBBc3NhbSBzdGF0ZSwgYWZmZWN0aW5nIG92ZXIgNDUwLDAwMCBwZW9wbGUuIE11bHRpcGxlIGRpc3RyaWN0cyBzdWJtZXJnZWQgd2l0aCBlbWVyZ2VuY3kgZXZhY3VhdGlvbnMgb25nb2luZy5cIixcbiAgICAgICAgdXJsOiBcImh0dHBzOi8vbmRtYS5nb3YuaW4vXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiBcImluZGlhLWZsb29kLWJpaGFyLTIwMjVcIixcbiAgICAgICAgdHlwZTogXCJmbG9vZFwiLFxuICAgICAgICB0aXRsZTogXCJGbGFzaCBGbG9vZHMgaW4gQmloYXIgRHVlIHRvIEhlYXZ5IFJhaW5mYWxsXCIsXG4gICAgICAgIGxvY2F0aW9uOiB7IGxhdDogMjUuMDk2MSwgbG5nOiA4NS4zMTMxIH0sIC8vIFBhdG5hLCBCaWhhclxuICAgICAgICBtYWduaXR1ZGU6IDcuMixcbiAgICAgICAgdGltZTogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDIgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKSwgLy8gMiBob3VycyBhZ29cbiAgICAgICAgc2V2ZXJpdHk6IFwiaGlnaFwiLFxuICAgICAgICBhZmZlY3RlZDogMjgwMDAwLFxuICAgICAgICBzb3VyY2U6IFwibG9jYWxcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ29udGludW91cyByYWluZmFsbCBoYXMgbGVkIHRvIGZsYXNoIGZsb29kaW5nIGluIG11bHRpcGxlIGRpc3RyaWN0cyBvZiBCaWhhci4gUml2ZXJzIGFyZSBmbG93aW5nIGFib3ZlIGRhbmdlciBsZXZlbHMuXCIsXG4gICAgICAgIHVybDogXCJodHRwczovL25kbWEuZ292LmluL1wiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogXCJpbmRpYS1mbG9vZC13ZXN0LWJlbmdhbC0yMDI1XCIsXG4gICAgICAgIHR5cGU6IFwiZmxvb2RcIixcbiAgICAgICAgdGl0bGU6IFwiVXJiYW4gRmxvb2RpbmcgaW4gS29sa2F0YSBBZnRlciBIZWF2eSBEb3ducG91clwiLFxuICAgICAgICBsb2NhdGlvbjogeyBsYXQ6IDIyLjU3MjYsIGxuZzogODguMzYzOSB9LCAvLyBLb2xrYXRhLCBXZXN0IEJlbmdhbFxuICAgICAgICBtYWduaXR1ZGU6IDYuOCxcbiAgICAgICAgdGltZTogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKSwgLy8gNCBob3VycyBhZ29cbiAgICAgICAgc2V2ZXJpdHk6IFwiaGlnaFwiLFxuICAgICAgICBhZmZlY3RlZDogMTgwMDAwLFxuICAgICAgICBzb3VyY2U6IFwibG9jYWxcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiSGVhdnkgbW9uc29vbiBzaG93ZXJzIGhhdmUgY2F1c2VkIHdhdGVybG9nZ2luZyBhbmQgZmxvb2RpbmcgaW4gc2V2ZXJhbCBwYXJ0cyBvZiBLb2xrYXRhLCBkaXNydXB0aW5nIG5vcm1hbCBsaWZlLlwiLFxuICAgICAgICB1cmw6IFwiaHR0cHM6Ly9uZG1hLmdvdi5pbi9cIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6IFwiaW5kaWEtZmxvb2QtdXR0YXJha2hhbmQtMjAyNVwiLFxuICAgICAgICB0eXBlOiBcImZsb29kXCIsXG4gICAgICAgIHRpdGxlOiBcIk1vdW50YWluIEZsYXNoIEZsb29kcyBpbiBVdHRhcmFraGFuZFwiLFxuICAgICAgICBsb2NhdGlvbjogeyBsYXQ6IDMwLjA2NjgsIGxuZzogNzkuMDE5MyB9LCAvLyBEZWhyYWR1biwgVXR0YXJha2hhbmRcbiAgICAgICAgbWFnbml0dWRlOiA3LjksXG4gICAgICAgIHRpbWU6IG5ldyBEYXRlKERhdGUubm93KCkgLSA2ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksIC8vIDYgaG91cnMgYWdvXG4gICAgICAgIHNldmVyaXR5OiBcImNyaXRpY2FsXCIsXG4gICAgICAgIGFmZmVjdGVkOiA4NTAwMCxcbiAgICAgICAgc291cmNlOiBcImxvY2FsXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNsb3VkIGJ1cnN0IGFuZCBoZWF2eSByYWlucyBpbiB0aGUgaGlsbHMgaGF2ZSB0cmlnZ2VyZWQgZmxhc2ggZmxvb2RzIGluIHNldmVyYWwgZGlzdHJpY3RzIG9mIFV0dGFyYWtoYW5kLiBQaWxncmltYWdlIHJvdXRlcyBhZmZlY3RlZC5cIixcbiAgICAgICAgdXJsOiBcImh0dHBzOi8vbmRtYS5nb3YuaW4vXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiBcImluZGlhLWZsb29kLW1haGFyYXNodHJhLTIwMjVcIixcbiAgICAgICAgdHlwZTogXCJmbG9vZFwiLFxuICAgICAgICB0aXRsZTogXCJSaXZlciBGbG9vZGluZyBpbiBXZXN0ZXJuIE1haGFyYXNodHJhXCIsXG4gICAgICAgIGxvY2F0aW9uOiB7IGxhdDogMTguNTIwNCwgbG5nOiA3My44NTY3IH0sIC8vIFB1bmUsIE1haGFyYXNodHJhXG4gICAgICAgIG1hZ25pdHVkZTogNi41LFxuICAgICAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gOCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLCAvLyA4IGhvdXJzIGFnb1xuICAgICAgICBzZXZlcml0eTogXCJtZWRpdW1cIixcbiAgICAgICAgYWZmZWN0ZWQ6IDEyNTAwMCxcbiAgICAgICAgc291cmNlOiBcImxvY2FsXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlJpc2luZyB3YXRlciBsZXZlbHMgaW4gcml2ZXJzIGR1ZSB0byBoZWF2eSB1cHN0cmVhbSByYWluZmFsbCBoYXZlIGNhdXNlZCBmbG9vZGluZyBpbiBhZ3JpY3VsdHVyYWwgYXJlYXMgb2YgTWFoYXJhc2h0cmEuXCIsXG4gICAgICAgIHVybDogXCJodHRwczovL25kbWEuZ292LmluL1wiXG4gICAgICB9XG4gICAgXVxuXG4gICAgLy8gQWRkIEluZGlhIGZsb29kIGRhdGEgdG8gZGlzYXN0ZXJzIGFycmF5XG4gICAgZGlzYXN0ZXJzLnB1c2goLi4uY3VycmVudEluZGlhRmxvb2RzKVxuXG4gICAgLy8gQWRkIGN1cnJlbnQgSW5kaWEgd2VhdGhlciBhbGVydHMgYW5kIG1vbnNvb24gd2FybmluZ3NcbiAgICBjb25zdCBjdXJyZW50SW5kaWFXZWF0aGVyQWxlcnRzID0gW1xuICAgICAge1xuICAgICAgICBpZDogXCJpbmRpYS13ZWF0aGVyLXJlZC1hbGVydC0yMDI1XCIsXG4gICAgICAgIHR5cGU6IFwic3Rvcm1cIixcbiAgICAgICAgdGl0bGU6IFwiUmVkIEFsZXJ0OiBIZWF2eSBSYWluZmFsbCBXYXJuaW5nIGZvciBOb3J0aCBJbmRpYVwiLFxuICAgICAgICBsb2NhdGlvbjogeyBsYXQ6IDI4LjcwNDEsIGxuZzogNzcuMTAyNSB9LCAvLyBOZXcgRGVsaGlcbiAgICAgICAgbWFnbml0dWRlOiA4LjIsXG4gICAgICAgIHRpbWU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgc2V2ZXJpdHk6IFwiY3JpdGljYWxcIixcbiAgICAgICAgYWZmZWN0ZWQ6IDE1MDAwMDAsXG4gICAgICAgIHNvdXJjZTogXCJ3ZWF0aGVyXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIklNRCBoYXMgaXNzdWVkIGEgcmVkIGFsZXJ0IGZvciBleHRyZW1lbHkgaGVhdnkgcmFpbmZhbGwgaW4gRGVsaGksIFB1bmphYiwgSGFyeWFuYSwgYW5kIFVQLiBQb3RlbnRpYWwgZm9yIHNldmVyZSBmbG9vZGluZyBhbmQgZGlzcnVwdGlvbi5cIixcbiAgICAgICAgdXJsOiBcImh0dHBzOi8vbWF1c2FtLmltZC5nb3YuaW4vXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiBcImluZGlhLXdlYXRoZXItY3ljbG9uZS13YXJuaW5nLTIwMjVcIixcbiAgICAgICAgdHlwZTogXCJodXJyaWNhbmVcIixcbiAgICAgICAgdGl0bGU6IFwiQ3ljbG9uZSBBbGVydDogQmF5IG9mIEJlbmdhbCBEZXByZXNzaW9uXCIsXG4gICAgICAgIGxvY2F0aW9uOiB7IGxhdDogMTMuMDgyNywgbG5nOiA4MC4yNzA3IH0sIC8vIENoZW5uYWksIFRhbWlsIE5hZHVcbiAgICAgICAgbWFnbml0dWRlOiA3LjgsXG4gICAgICAgIHRpbWU6IG5ldyBEYXRlKERhdGUubm93KCkgLSAzICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHNldmVyaXR5OiBcImhpZ2hcIixcbiAgICAgICAgYWZmZWN0ZWQ6IDg1MDAwMCxcbiAgICAgICAgc291cmNlOiBcIndlYXRoZXJcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiTG93IHByZXNzdXJlIHN5c3RlbSBpbiBCYXkgb2YgQmVuZ2FsIGludGVuc2lmeWluZy4gQ29hc3RhbCBhcmVhcyBvZiBUYW1pbCBOYWR1IGFuZCBBbmRocmEgUHJhZGVzaCBvbiBoaWdoIGFsZXJ0LlwiLFxuICAgICAgICB1cmw6IFwiaHR0cHM6Ly9tYXVzYW0uaW1kLmdvdi5pbi9cIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6IFwiaW5kaWEtd2VhdGhlci1oZWF0LXdhdmUtMjAyNVwiLFxuICAgICAgICB0eXBlOiBcImhlYXR3YXZlXCIsXG4gICAgICAgIHRpdGxlOiBcIkhlYXQgV2F2ZSBDb25kaXRpb25zIGluIFJhamFzdGhhblwiLFxuICAgICAgICBsb2NhdGlvbjogeyBsYXQ6IDI2LjkxMjQsIGxuZzogNzUuNzg3MyB9LCAvLyBKYWlwdXIsIFJhamFzdGhhblxuICAgICAgICBtYWduaXR1ZGU6IDYuOSxcbiAgICAgICAgdGltZTogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDEyICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHNldmVyaXR5OiBcIm1lZGl1bVwiLFxuICAgICAgICBhZmZlY3RlZDogMzIwMDAwLFxuICAgICAgICBzb3VyY2U6IFwid2VhdGhlclwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJTZXZlcmUgaGVhdCB3YXZlIGNvbmRpdGlvbnMgcHJldmFpbGluZyBpbiB3ZXN0ZXJuIFJhamFzdGhhbiB3aXRoIHRlbXBlcmF0dXJlcyByZWFjaGluZyA0N8KwQy4gSGVhbHRoIGFkdmlzb3J5IGlzc3VlZC5cIixcbiAgICAgICAgdXJsOiBcImh0dHBzOi8vbWF1c2FtLmltZC5nb3YuaW4vXCJcbiAgICAgIH1cbiAgICBdXG5cbiAgICAvLyBBZGQgd2VhdGhlciBhbGVydHMgdG8gZGlzYXN0ZXJzIGFycmF5XG4gICAgZGlzYXN0ZXJzLnB1c2goLi4uY3VycmVudEluZGlhV2VhdGhlckFsZXJ0cylcblxuICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBnZW5lcmF0ZSBlc3RpbWF0ZWQgY29vcmRpbmF0ZXNcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUVzdGltYXRlZENvb3JkaW5hdGVzKHRpdGxlOiBzdHJpbmcsIGRlc2NyaXB0aW9uOiBzdHJpbmcpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBgJHt0aXRsZX0gJHtkZXNjcmlwdGlvbn1gLnRvTG93ZXJDYXNlKClcbiAgICAgIFxuICAgICAgLy8gQ29tcHJlaGVuc2l2ZSBsb2NhdGlvbiBtYXBwaW5nIHdpdGggYmV0dGVyIEluZGlhIGNvdmVyYWdlXG4gICAgICBjb25zdCBsb2NhdGlvbk1hcDogeyBba2V5OiBzdHJpbmddOiB7IGxhdDogbnVtYmVyLCBsbmc6IG51bWJlciB9IH0gPSB7XG4gICAgICAgIC8vIFVuaXRlZCBTdGF0ZXNcbiAgICAgICAgJ2NhbGlmb3JuaWEnOiB7IGxhdDogMzYuNzc4MywgbG5nOiAtMTE5LjQxNzkgfSxcbiAgICAgICAgJ2Zsb3JpZGEnOiB7IGxhdDogMjcuNzY2MywgbG5nOiAtODIuNjQwNCB9LFxuICAgICAgICAndGV4YXMnOiB7IGxhdDogMzEuOTY4NiwgbG5nOiAtOTkuOTAxOCB9LFxuICAgICAgICAnbmV3IHlvcmsnOiB7IGxhdDogNDAuNzEyOCwgbG5nOiAtNzQuMDA2MCB9LFxuICAgICAgICAnYWxhc2thJzogeyBsYXQ6IDYxLjIxODEsIGxuZzogLTE0OS45MDAzIH0sXG4gICAgICAgICdoYXdhaWknOiB7IGxhdDogMjEuMDk0MywgbG5nOiAtMTU3LjQ5ODMgfSxcbiAgICAgICAgXG4gICAgICAgIC8vIEluZGlhIC0gY29tcHJlaGVuc2l2ZSBjb3ZlcmFnZVxuICAgICAgICAnaW5kaWEnOiB7IGxhdDogMjAuNTkzNywgbG5nOiA3OC45NjI5IH0sXG4gICAgICAgICdkZWxoaSc6IHsgbGF0OiAyOC43MDQxLCBsbmc6IDc3LjEwMjUgfSxcbiAgICAgICAgJ211bWJhaSc6IHsgbGF0OiAxOS4wNzYwLCBsbmc6IDcyLjg3NzcgfSxcbiAgICAgICAgJ2tvbGthdGEnOiB7IGxhdDogMjIuNTcyNiwgbG5nOiA4OC4zNjM5IH0sXG4gICAgICAgICdjaGVubmFpJzogeyBsYXQ6IDEzLjA4MjcsIGxuZzogODAuMjcwNyB9LFxuICAgICAgICAnYmFuZ2Fsb3JlJzogeyBsYXQ6IDEyLjk3MTYsIGxuZzogNzcuNTk0NiB9LFxuICAgICAgICAnaHlkZXJhYmFkJzogeyBsYXQ6IDE3LjM4NTAsIGxuZzogNzguNDg2NyB9LFxuICAgICAgICAncHVuZSc6IHsgbGF0OiAxOC41MjA0LCBsbmc6IDczLjg1NjcgfSxcbiAgICAgICAgJ2FobWVkYWJhZCc6IHsgbGF0OiAyMy4wMjI1LCBsbmc6IDcyLjU3MTQgfSxcbiAgICAgICAgJ2phaXB1cic6IHsgbGF0OiAyNi45MTI0LCBsbmc6IDc1Ljc4NzMgfSxcbiAgICAgICAgJ2x1Y2tub3cnOiB7IGxhdDogMjYuODQ2NywgbG5nOiA4MC45NDYyIH0sXG4gICAgICAgICdrYW5wdXInOiB7IGxhdDogMjYuNDQ5OSwgbG5nOiA4MC4zMzE5IH0sXG4gICAgICAgICduYWdwdXInOiB7IGxhdDogMjEuMTQ1OCwgbG5nOiA3OS4wODgyIH0sXG4gICAgICAgICdndXdhaGF0aSc6IHsgbGF0OiAyNi4yMDA2LCBsbmc6IDkyLjkzNzYgfSxcbiAgICAgICAgJ3BhdG5hJzogeyBsYXQ6IDI1LjA5NjEsIGxuZzogODUuMzEzMSB9LFxuICAgICAgICAnYmhvcGFsJzogeyBsYXQ6IDIzLjI1OTksIGxuZzogNzcuNDEyNiB9LFxuICAgICAgICAndmlzYWtoYXBhdG5hbSc6IHsgbGF0OiAxNy42ODY4LCBsbmc6IDgzLjIxODUgfSxcbiAgICAgICAgJ3ZhZG9kYXJhJzogeyBsYXQ6IDIyLjMwNzIsIGxuZzogNzMuMTgxMiB9LFxuICAgICAgICAnbHVkaGlhbmEnOiB7IGxhdDogMzAuOTAxMCwgbG5nOiA3NS44NTczIH0sXG4gICAgICAgICdhZ3JhJzogeyBsYXQ6IDI3LjE3NjcsIGxuZzogNzguMDA4MSB9LFxuICAgICAgICAnbmFzaGlrJzogeyBsYXQ6IDE5Ljk5NzUsIGxuZzogNzMuNzg5OCB9LFxuICAgICAgICAnZmFyaWRhYmFkJzogeyBsYXQ6IDI4LjQwODksIGxuZzogNzcuMzE3OCB9LFxuICAgICAgICAnbWVlcnV0JzogeyBsYXQ6IDI4Ljk4NDUsIGxuZzogNzcuNzA2NCB9LFxuICAgICAgICAncmFqa290JzogeyBsYXQ6IDIyLjMwMzksIGxuZzogNzAuODAyMiB9LFxuICAgICAgICAna2FseWFuJzogeyBsYXQ6IDE5LjI0MDMsIGxuZzogNzMuMTMwNSB9LFxuICAgICAgICAndmFzYWknOiB7IGxhdDogMTkuNDg4MSwgbG5nOiA3Mi44MDU5IH0sXG4gICAgICAgICd2YXJhbmFzaSc6IHsgbGF0OiAyNS4zMTc2LCBsbmc6IDgyLjk3MzkgfSxcbiAgICAgICAgJ3NyaW5hZ2FyJzogeyBsYXQ6IDM0LjA4MzcsIGxuZzogNzQuNzk3MyB9LFxuICAgICAgICAnZGVocmFkdW4nOiB7IGxhdDogMzAuMzE2NSwgbG5nOiA3OC4wMzIyIH0sXG4gICAgICAgICdjaGFuZGlnYXJoJzogeyBsYXQ6IDMwLjczMzMsIGxuZzogNzYuNzc5NCB9LFxuICAgICAgICAnc2hpbWxhJzogeyBsYXQ6IDMxLjEwNDgsIGxuZzogNzcuMTczNCB9LFxuICAgICAgICAnamFtbXUnOiB7IGxhdDogMzIuNzI2NiwgbG5nOiA3NC44NTcwIH0sXG4gICAgICAgICdrZXJhbGEnOiB7IGxhdDogMTAuODUwNSwgbG5nOiA3Ni4yNzExIH0sXG4gICAgICAgICdnb2EnOiB7IGxhdDogMTUuMjk5MywgbG5nOiA3NC4xMjQwIH0sXG4gICAgICAgICdhc3NhbSc6IHsgbGF0OiAyNi4yMDA2LCBsbmc6IDkyLjkzNzYgfSxcbiAgICAgICAgJ2JpaGFyJzogeyBsYXQ6IDI1LjA5NjEsIGxuZzogODUuMzEzMSB9LFxuICAgICAgICAnd2VzdCBiZW5nYWwnOiB7IGxhdDogMjIuNTcyNiwgbG5nOiA4OC4zNjM5IH0sXG4gICAgICAgICd1dHRhciBwcmFkZXNoJzogeyBsYXQ6IDI2Ljg0NjcsIGxuZzogODAuOTQ2MiB9LFxuICAgICAgICAnbWFoYXJhc2h0cmEnOiB7IGxhdDogMTkuNzUxNSwgbG5nOiA3NS43MTM5IH0sXG4gICAgICAgICdyYWphc3RoYW4nOiB7IGxhdDogMjcuMDIzOCwgbG5nOiA3NC4yMTc5IH0sXG4gICAgICAgICd0YW1pbCBuYWR1JzogeyBsYXQ6IDExLjEyNzEsIGxuZzogNzguNjU2OSB9LFxuICAgICAgICAna2FybmF0YWthJzogeyBsYXQ6IDE1LjMxNzMsIGxuZzogNzUuNzEzOSB9LFxuICAgICAgICAnZ3VqYXJhdCc6IHsgbGF0OiAyMi4yNTg3LCBsbmc6IDcxLjE5MjQgfSxcbiAgICAgICAgJ29kaXNoYSc6IHsgbGF0OiAyMC45NTE3LCBsbmc6IDg1LjA5ODUgfSxcbiAgICAgICAgJ3RlbGFuZ2FuYSc6IHsgbGF0OiAxOC4xMTI0LCBsbmc6IDc5LjAxOTMgfSxcbiAgICAgICAgJ3B1bmphYic6IHsgbGF0OiAzMS4xNDcxLCBsbmc6IDc1LjM0MTIgfSxcbiAgICAgICAgJ2hhcnlhbmEnOiB7IGxhdDogMjkuMDU4OCwgbG5nOiA3Ni4wODU2IH0sXG4gICAgICAgICdoaW1hY2hhbCBwcmFkZXNoJzogeyBsYXQ6IDMxLjEwNDgsIGxuZzogNzcuMTczNCB9LFxuICAgICAgICAndXR0YXJha2hhbmQnOiB7IGxhdDogMzAuMDY2OCwgbG5nOiA3OS4wMTkzIH0sXG4gICAgICAgICdqaGFya2hhbmQnOiB7IGxhdDogMjMuNjEwMiwgbG5nOiA4NS4yNzk5IH0sXG4gICAgICAgICdjaGhhdHRpc2dhcmgnOiB7IGxhdDogMjEuMjc4NywgbG5nOiA4MS44NjYxIH0sXG4gICAgICAgICdtYW5pcHVyJzogeyBsYXQ6IDI0LjY2MzcsIGxuZzogOTMuOTA2MyB9LFxuICAgICAgICAnbWVnaGFsYXlhJzogeyBsYXQ6IDI1LjQ2NzAsIGxuZzogOTEuMzY2MiB9LFxuICAgICAgICAndHJpcHVyYSc6IHsgbGF0OiAyMy45NDA4LCBsbmc6IDkxLjk4ODIgfSxcbiAgICAgICAgJ21pem9yYW0nOiB7IGxhdDogMjMuMTY0NSwgbG5nOiA5Mi45Mzc2IH0sXG4gICAgICAgICdhcnVuYWNoYWwgcHJhZGVzaCc6IHsgbGF0OiAyOC4yMTgwLCBsbmc6IDk0LjcyNzggfSxcbiAgICAgICAgJ25hZ2FsYW5kJzogeyBsYXQ6IDI2LjE1ODQsIGxuZzogOTQuNTYyNCB9LFxuICAgICAgICAnc2lra2ltJzogeyBsYXQ6IDI3LjUzMzAsIGxuZzogODguNTEyMiB9LFxuICAgICAgICBcbiAgICAgICAgLy8gT3RoZXIgQXNpYW4gY291bnRyaWVzXG4gICAgICAgICdqYXBhbic6IHsgbGF0OiAzNi4yMDQ4LCBsbmc6IDEzOC4yNTI5IH0sXG4gICAgICAgICdjaGluYSc6IHsgbGF0OiAzNS44NjE3LCBsbmc6IDEwNC4xOTU0IH0sXG4gICAgICAgICdpbmRvbmVzaWEnOiB7IGxhdDogLTAuNzg5MywgbG5nOiAxMTMuOTIxMyB9LFxuICAgICAgICAncGhpbGlwcGluZXMnOiB7IGxhdDogMTIuODc5NywgbG5nOiAxMjEuNzc0MCB9LFxuICAgICAgICAndGhhaWxhbmQnOiB7IGxhdDogMTUuODcwMCwgbG5nOiAxMDAuOTkyNSB9LFxuICAgICAgICAndmlldG5hbSc6IHsgbGF0OiAxNC4wNTgzLCBsbmc6IDEwOC4yNzcyIH0sXG4gICAgICAgICdtYWxheXNpYSc6IHsgbGF0OiA0LjIxMDUsIGxuZzogMTAxLjk3NTggfSxcbiAgICAgICAgJ3NpbmdhcG9yZSc6IHsgbGF0OiAxLjM1MjEsIGxuZzogMTAzLjgxOTggfSxcbiAgICAgICAgJ3NvdXRoIGtvcmVhJzogeyBsYXQ6IDM1LjkwNzgsIGxuZzogMTI3Ljc2NjkgfSxcbiAgICAgICAgJ25vcnRoIGtvcmVhJzogeyBsYXQ6IDQwLjMzOTksIGxuZzogMTI3LjUxMDEgfSxcbiAgICAgICAgJ215YW5tYXInOiB7IGxhdDogMjEuOTE2MiwgbG5nOiA5NS45NTYwIH0sXG4gICAgICAgICdiYW5nbGFkZXNoJzogeyBsYXQ6IDIzLjY4NTAsIGxuZzogOTAuMzU2MyB9LFxuICAgICAgICAncGFraXN0YW4nOiB7IGxhdDogMzAuMzc1MywgbG5nOiA2OS4zNDUxIH0sXG4gICAgICAgICdzcmkgbGFua2EnOiB7IGxhdDogNy44NzMxLCBsbmc6IDgwLjc3MTggfSxcbiAgICAgICAgJ25lcGFsJzogeyBsYXQ6IDI4LjM5NDksIGxuZzogODQuMTI0MCB9LFxuICAgICAgICAnYmh1dGFuJzogeyBsYXQ6IDI3LjUxNDIsIGxuZzogOTAuNDMzNiB9LFxuICAgICAgICAnYWZnaGFuaXN0YW4nOiB7IGxhdDogMzMuOTM5MSwgbG5nOiA2Ny43MTAwIH0sXG4gICAgICAgIFxuICAgICAgICAvLyBBdXN0cmFsaWEgYW5kIE9jZWFuaWFcbiAgICAgICAgJ2F1c3RyYWxpYSc6IHsgbGF0OiAtMjUuMjc0NCwgbG5nOiAxMzMuNzc1MSB9LFxuICAgICAgICAnbmV3IHplYWxhbmQnOiB7IGxhdDogLTQwLjkwMDYsIGxuZzogMTc0Ljg4NjAgfSxcbiAgICAgICAgXG4gICAgICAgIC8vIEV1cm9wZVxuICAgICAgICAnaXRhbHknOiB7IGxhdDogNDEuODcxOSwgbG5nOiAxMi41Njc0IH0sXG4gICAgICAgICd0dXJrZXknOiB7IGxhdDogMzguOTYzNywgbG5nOiAzNS4yNDMzIH0sXG4gICAgICAgICdncmVlY2UnOiB7IGxhdDogMzkuMDc0MiwgbG5nOiAyMS44MjQzIH0sXG4gICAgICAgICdzcGFpbic6IHsgbGF0OiA0MC40NjM3LCBsbmc6IC0zLjc0OTIgfSxcbiAgICAgICAgJ2ZyYW5jZSc6IHsgbGF0OiA0Ni42MDM0LCBsbmc6IDEuODg4MyB9LFxuICAgICAgICAnZ2VybWFueSc6IHsgbGF0OiA1MS4xNjU3LCBsbmc6IDEwLjQ1MTUgfSxcbiAgICAgICAgJ3VuaXRlZCBraW5nZG9tJzogeyBsYXQ6IDU1LjM3ODEsIGxuZzogLTMuNDM2MCB9LFxuICAgICAgICAncG9ydHVnYWwnOiB7IGxhdDogMzkuMzk5OSwgbG5nOiAtOC4yMjQ1IH0sXG4gICAgICAgIFxuICAgICAgICAvLyBBbWVyaWNhc1xuICAgICAgICAnbWV4aWNvJzogeyBsYXQ6IDIzLjYzNDUsIGxuZzogLTEwMi41NTI4IH0sXG4gICAgICAgICdicmF6aWwnOiB7IGxhdDogLTE0LjIzNTAsIGxuZzogLTUxLjkyNTMgfSxcbiAgICAgICAgJ2NoaWxlJzogeyBsYXQ6IC0zNS42NzUxLCBsbmc6IC03MS41NDMwIH0sXG4gICAgICAgICdwZXJ1JzogeyBsYXQ6IC05LjE5MDAsIGxuZzogLTc1LjAxNTIgfSxcbiAgICAgICAgJ2NvbG9tYmlhJzogeyBsYXQ6IDQuNTcwOSwgbG5nOiAtNzQuMjk3MyB9LFxuICAgICAgICAnYXJnZW50aW5hJzogeyBsYXQ6IC0zOC40MTYxLCBsbmc6IC02My42MTY3IH0sXG4gICAgICAgICdjYW5hZGEnOiB7IGxhdDogNTYuMTMwNCwgbG5nOiAtMTA2LjM0NjggfSxcbiAgICAgICAgXG4gICAgICAgIC8vIEFmcmljYVxuICAgICAgICAnc291dGggYWZyaWNhJzogeyBsYXQ6IC0zMC41NTk1LCBsbmc6IDIyLjkzNzUgfSxcbiAgICAgICAgJ2VneXB0JzogeyBsYXQ6IDI2LjA5NzUsIGxuZzogMzEuMjM1NyB9LFxuICAgICAgICAnbmlnZXJpYSc6IHsgbGF0OiA5LjA4MjAsIGxuZzogOC42NzUzIH0sXG4gICAgICAgICdrZW55YSc6IHsgbGF0OiAtMC4wMjM2LCBsbmc6IDM3LjkwNjIgfSxcbiAgICAgICAgJ21vcm9jY28nOiB7IGxhdDogMzEuNzkxNywgbG5nOiAtNy4wOTI2IH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgZm9yIChjb25zdCBbbG9jYXRpb24sIGNvb3Jkc10gb2YgT2JqZWN0LmVudHJpZXMobG9jYXRpb25NYXApKSB7XG4gICAgICAgIGlmIChjb250ZW50LmluY2x1ZGVzKGxvY2F0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBjb29yZHNcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBEZWZhdWx0IHRvIHNvbWV3aGVyZSBpbiB0aGUgUGFjaWZpYyBpZiBubyBsb2NhdGlvbiBmb3VuZFxuICAgICAgcmV0dXJuIHsgbGF0OiAwLCBsbmc6IDAgfVxuICAgIH1cblxuICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBlc3RpbWF0ZSBtYWduaXR1ZGUgYmFzZWQgb24gY29udGVudFxuICAgIGZ1bmN0aW9uIGdldEVzdGltYXRlZE1hZ25pdHVkZShjb250ZW50OiBzdHJpbmcsIHR5cGU6IHN0cmluZyk6IG51bWJlciB7XG4gICAgICBpZiAodHlwZSA9PT0gJ2VhcnRocXVha2UnKSB7XG4gICAgICAgIGlmIChjb250ZW50LmluY2x1ZGVzKCdtYWduaXR1ZGUnKSkge1xuICAgICAgICAgIGNvbnN0IG1hdGNoID0gY29udGVudC5tYXRjaCgvbWFnbml0dWRlXFxzKihcXGQrXFwuP1xcZCopL2kpXG4gICAgICAgICAgaWYgKG1hdGNoKSByZXR1cm4gcGFyc2VGbG9hdChtYXRjaFsxXSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGVudC5pbmNsdWRlcygnbWFqb3InKSA/IDcuNSA6IGNvbnRlbnQuaW5jbHVkZXMoJ3N0cm9uZycpID8gNi41IDogNS41XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdodXJyaWNhbmUnKSB7XG4gICAgICAgIGlmIChjb250ZW50LmluY2x1ZGVzKCdjYXRlZ29yeSA1JykpIHJldHVybiA1XG4gICAgICAgIGlmIChjb250ZW50LmluY2x1ZGVzKCdjYXRlZ29yeSA0JykpIHJldHVybiA0XG4gICAgICAgIGlmIChjb250ZW50LmluY2x1ZGVzKCdjYXRlZ29yeSAzJykpIHJldHVybiAzXG4gICAgICAgIGlmIChjb250ZW50LmluY2x1ZGVzKCdjYXRlZ29yeSAyJykpIHJldHVybiAyXG4gICAgICAgIGlmIChjb250ZW50LmluY2x1ZGVzKCdjYXRlZ29yeSAxJykpIHJldHVybiAxXG4gICAgICAgIHJldHVybiAzXG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd3aWxkZmlyZScpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQuaW5jbHVkZXMoJ21hc3NpdmUnKSA/IDggOiBjb250ZW50LmluY2x1ZGVzKCdsYXJnZScpID8gNiA6IDRcbiAgICAgIH1cbiAgICAgIHJldHVybiA1XG4gICAgfVxuXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGVzdGltYXRlIGFmZmVjdGVkIHBlb3BsZVxuICAgIGZ1bmN0aW9uIGdldEVzdGltYXRlZEFmZmVjdGVkKGNvbnRlbnQ6IHN0cmluZywgdHlwZTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgIGlmIChjb250ZW50LmluY2x1ZGVzKCd0aG91c2FuZHMnKSkgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwMDAwKSArIDEwMDAwXG4gICAgICBpZiAoY29udGVudC5pbmNsdWRlcygnaHVuZHJlZHMnKSkgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwMDApICsgMTAwMFxuICAgICAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ2RvemVucycpKSByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNTAwKSArIDEwMFxuICAgICAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ2V2YWN1YXRlJykpIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApICsgMjAwMDBcbiAgICAgIGlmIChjb250ZW50LmluY2x1ZGVzKCdlbWVyZ2VuY3knKSkgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwMDAwKSArIDEwMDAwXG4gICAgICBcbiAgICAgIC8vIERlZmF1bHQgZXN0aW1hdGVzIGJhc2VkIG9uIGRpc2FzdGVyIHR5cGVcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdlYXJ0aHF1YWtlJzogcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMCkgKyA1MDAwMFxuICAgICAgICBjYXNlICdodXJyaWNhbmUnOiByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjAwMDAwKSArIDEwMDAwMFxuICAgICAgICBjYXNlICd3aWxkZmlyZSc6IHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1MDAwMCkgKyAxMDAwMFxuICAgICAgICBjYXNlICdmbG9vZCc6IHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA3NTAwMCkgKyAyNTAwMFxuICAgICAgICBjYXNlICd0b3JuYWRvJzogcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKSArIDUwMDBcbiAgICAgICAgY2FzZSAndHN1bmFtaSc6IHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNTAwMDApICsgNzUwMDBcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1MDAwKSArIDUwMDBcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTb3J0IGJ5IHRpbWUgKG1vc3QgcmVjZW50IGZpcnN0KVxuICAgIGRpc2FzdGVycy5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShiLnRpbWUpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGEudGltZSkuZ2V0VGltZSgpKVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkaXNhc3RlcnM6IGRpc2FzdGVycy5zbGljZSgwLCAzMCksIC8vIExpbWl0IHRvIDMwIG1vc3QgcmVjZW50XG4gICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgc291cmNlczogW1wiTkFTQSBFT05FVFwiLCBcIlVTR1NcIiwgXCJPcGVuV2VhdGhlck1hcFwiLCBcIk5ld3NBUElcIl0sXG4gICAgICBhcGlTdGF0dXM6IHtcbiAgICAgICAgbmFzYTogbmFzYUV2ZW50cy5sZW5ndGggPiAwLFxuICAgICAgICB1c2dzOiB1c2dzUmVzdWx0LmVycm9yID8gdXNnc1Jlc3VsdC5lcnJvciA6ICh1c2dzUmVzdWx0LmRhdGEubGVuZ3RoID4gMCksXG4gICAgICAgIHdlYXRoZXI6IHdlYXRoZXJEYXRhLmxlbmd0aCA+IDAsXG4gICAgICAgIG5ld3M6IG5ld3NBcnRpY2xlcy5sZW5ndGggPiAwXG4gICAgICB9LFxuICAgICAgY291bnQ6IGRpc2FzdGVycy5sZW5ndGhcbiAgICB9KVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJBUEkgZXJyb3I6XCIsIGVycm9yKVxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IFxuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogXCJGYWlsZWQgdG8gZmV0Y2ggZGlzYXN0ZXIgZGF0YVwiLCBcbiAgICAgIGRpc2FzdGVyczogW10sXG4gICAgICBhcGlTdGF0dXM6IHtcbiAgICAgICAgbmFzYTogZmFsc2UsXG4gICAgICAgIHVzZ3M6IGZhbHNlLFxuICAgICAgICB3ZWF0aGVyOiBmYWxzZSxcbiAgICAgICAgbmV3czogZmFsc2VcbiAgICAgIH0sXG4gICAgICBjb3VudDogMFxuICAgIH0sIHsgc3RhdHVzOiA1MDAgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImZldGNoRWFydGhxdWFrZURhdGEiLCJmZXRjaE5BU0FFdmVudHMiLCJyZXNwb25zZSIsImZldGNoIiwibmV4dCIsInJldmFsaWRhdGUiLCJvayIsIkVycm9yIiwiZGF0YSIsImpzb24iLCJldmVudHMiLCJlcnJvciIsImNvbnNvbGUiLCJmZXRjaFVTR1NFYXJ0aHF1YWtlcyIsImZlYXR1cmVzIiwibWVzc2FnZSIsImZldGNoV2VhdGhlckFsZXJ0cyIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJPUEVOV0VBVEhFUl9BUElfS0VZIiwid2FybiIsImxvY2F0aW9ucyIsIm5hbWUiLCJsYXQiLCJsb24iLCJ3ZWF0aGVyUHJvbWlzZXMiLCJtYXAiLCJsb2NhdGlvbiIsImxvY2F0aW9uTmFtZSIsImVyciIsInJlc3VsdHMiLCJQcm9taXNlIiwiYWxsIiwiZmlsdGVyIiwiQm9vbGVhbiIsImZldGNoRGlzYXN0ZXJOZXdzIiwiTkVXU19BUElfS0VZIiwic2VhcmNoVGVybXMiLCJzZWFyY2hUZXJtIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiRGF0ZSIsIm5vdyIsInRvSVNPU3RyaW5nIiwic3BsaXQiLCJoZWFkZXJzIiwic3RhdHVzIiwiYXJ0aWNsZXMiLCJHRVQiLCJuYXNhRXZlbnRzIiwidXNnc1Jlc3VsdCIsIndlYXRoZXJEYXRhIiwibmV3c0FydGljbGVzIiwiZGlzYXN0ZXJzIiwiZm9yRWFjaCIsImV2ZW50IiwiZ2VvbWV0cnkiLCJjb29yZHMiLCJjb29yZGluYXRlcyIsImRpc2FzdGVyVHlwZSIsInNldmVyaXR5IiwiY2F0ZWdvcmllcyIsImNhdGVnb3J5IiwidGl0bGUiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwicHVzaCIsImlkIiwidHlwZSIsImxuZyIsIm1hZ25pdHVkZSIsInRpbWUiLCJkYXRlIiwiYWZmZWN0ZWQiLCJzb3VyY2UiLCJkZXNjcmlwdGlvbiIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJ1cmwiLCJzb3VyY2VzIiwiZWFydGhxdWFrZSIsInByb3BzIiwicHJvcGVydGllcyIsIm1hZyIsInBsYWNlIiwid2VhdGhlciIsImluZGV4Iiwid2luZFNwZWVkIiwid2luZCIsInNwZWVkIiwid2VhdGhlck1haW4iLCJtYWluIiwiY29vcmQiLCJ0ZW1wIiwiYXJ0aWNsZSIsImNvbnRlbnQiLCJlc3RpbWF0ZWRDb29yZHMiLCJnZW5lcmF0ZUVzdGltYXRlZENvb3JkaW5hdGVzIiwidXJsSGFzaCIsInBvcCIsInJlcGxhY2UiLCJ1bmlxdWVJZCIsImdldEVzdGltYXRlZE1hZ25pdHVkZSIsInB1Ymxpc2hlZEF0IiwiZ2V0RXN0aW1hdGVkQWZmZWN0ZWQiLCJuZXdzQXJ0aWNsZSIsImN1cnJlbnRJbmRpYUZsb29kcyIsImN1cnJlbnRJbmRpYVdlYXRoZXJBbGVydHMiLCJsb2NhdGlvbk1hcCIsIk9iamVjdCIsImVudHJpZXMiLCJtYXRjaCIsInBhcnNlRmxvYXQiLCJzb3J0IiwiYSIsImIiLCJnZXRUaW1lIiwic3VjY2VzcyIsImxhc3RVcGRhdGVkIiwiYXBpU3RhdHVzIiwibmFzYSIsInVzZ3MiLCJuZXdzIiwiY291bnQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/disasters/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/disaster-api.ts":
/*!*****************************!*\
  !*** ./lib/disaster-api.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchDisasterNews: () => (/* binding */ fetchDisasterNews),\n/* harmony export */   fetchEarthquakeData: () => (/* binding */ fetchEarthquakeData),\n/* harmony export */   fetchWeatherAlerts: () => (/* binding */ fetchWeatherAlerts),\n/* harmony export */   fetchWildfireData: () => (/* binding */ fetchWildfireData),\n/* harmony export */   generateMockHurricanes: () => (/* binding */ generateMockHurricanes),\n/* harmony export */   generateMockWildfires: () => (/* binding */ generateMockWildfires),\n/* harmony export */   transformEarthquakeData: () => (/* binding */ transformEarthquakeData)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n\n// USGS Earthquake API (Free, no key required)\nconst fetchEarthquakeData = async (minMagnitude = 4.0, daysBack = 7)=>{\n    try {\n        const endtime = new Date().toISOString();\n        const starttime = new Date(Date.now() - daysBack * 24 * 60 * 60 * 1000).toISOString();\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://earthquake.usgs.gov/fdsnws/event/1/query`, {\n            params: {\n                format: 'geojson',\n                starttime: starttime,\n                endtime: endtime,\n                minmagnitude: minMagnitude,\n                limit: 100,\n                orderby: 'time-asc'\n            },\n            timeout: 10000\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching earthquake data:', error);\n        throw error;\n    }\n};\n// NASA FIRMS Wildfire API (Free, no key required)\nconst fetchWildfireData = async ()=>{\n    try {\n        const today = new Date();\n        const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);\n        const dateStr = yesterday.toISOString().split('T')[0];\n        // Using NASA FIRMS MODIS data (free, no API key required)\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://firms.modaps.eosdis.nasa.gov/data/active_fire/modis-c6.1/csv/MODIS_C6_1_Global_24h.csv`, {\n            timeout: 10000\n        });\n        // Parse CSV data\n        const lines = response.data.split('\\n');\n        const headers = lines[0].split(',');\n        const wildfires = [];\n        for(let i = 1; i < Math.min(lines.length, 50); i++){\n            const values = lines[i].split(',');\n            if (values.length >= 9) {\n                wildfires.push({\n                    id: `wildfire-${i}`,\n                    type: 'wildfire',\n                    title: `Active Fire - ${values[7] || 'Unknown Location'}`,\n                    location: {\n                        lat: parseFloat(values[0]) || 0,\n                        lng: parseFloat(values[1]) || 0\n                    },\n                    magnitude: parseFloat(values[8]) || 300,\n                    time: new Date().toISOString(),\n                    severity: parseFloat(values[8]) > 350 ? 'critical' : parseFloat(values[8]) > 320 ? 'high' : 'medium',\n                    affected: Math.floor(Math.random() * 5000 + 100),\n                    description: `Active fire detected via satellite. Brightness: ${values[8]}`,\n                    url: 'https://firms.modaps.eosdis.nasa.gov/',\n                    source: 'nasa'\n                });\n            }\n        }\n        return wildfires.slice(0, 20) // Limit to 20 most recent\n        ;\n    } catch (error) {\n        console.error('Error fetching wildfire data:', error);\n        return [];\n    }\n};\n// OpenWeatherMap API for severe weather\nconst fetchWeatherAlerts = async ()=>{\n    const apiKey = process.env.OPENWEATHER_API_KEY;\n    if (!apiKey || apiKey === 'your_openweather_api_key_here') {\n        console.warn('OpenWeatherMap API key not configured');\n        return [];\n    }\n    try {\n        // Get weather alerts for major cities\n        const cities = [\n            {\n                name: 'New York',\n                lat: 40.7128,\n                lon: -74.0060\n            },\n            {\n                name: 'Los Angeles',\n                lat: 34.0522,\n                lon: -118.2437\n            },\n            {\n                name: 'Chicago',\n                lat: 41.8781,\n                lon: -87.6298\n            },\n            {\n                name: 'Houston',\n                lat: 29.7604,\n                lon: -95.3698\n            },\n            {\n                name: 'Miami',\n                lat: 25.7617,\n                lon: -80.1918\n            },\n            {\n                name: 'London',\n                lat: 51.5074,\n                lon: -0.1278\n            },\n            {\n                name: 'Tokyo',\n                lat: 35.6762,\n                lon: 139.6503\n            },\n            {\n                name: 'Sydney',\n                lat: -33.8688,\n                lon: 151.2093\n            }\n        ];\n        const weatherAlerts = [];\n        for (const city of cities.slice(0, 4)){\n            try {\n                const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://api.openweathermap.org/data/2.5/onecall`, {\n                    params: {\n                        lat: city.lat,\n                        lon: city.lon,\n                        appid: apiKey,\n                        exclude: 'minutely,hourly,daily'\n                    },\n                    timeout: 5000\n                });\n                if (response.data.alerts && response.data.alerts.length > 0) {\n                    response.data.alerts.forEach((alert, index)=>{\n                        weatherAlerts.push({\n                            id: `weather-${city.name}-${index}`,\n                            type: alert.event.toLowerCase().includes('hurricane') ? 'hurricane' : alert.event.toLowerCase().includes('tornado') ? 'tornado' : alert.event.toLowerCase().includes('flood') ? 'flood' : 'severe_weather',\n                            title: `${alert.event} - ${city.name}`,\n                            location: {\n                                lat: city.lat,\n                                lng: city.lon\n                            },\n                            magnitude: 3.5,\n                            time: new Date(alert.start * 1000).toISOString(),\n                            severity: alert.event.toLowerCase().includes('warning') ? 'high' : 'medium',\n                            affected: Math.floor(Math.random() * 50000 + 1000),\n                            description: alert.description,\n                            url: '#',\n                            source: 'weather'\n                        });\n                    });\n                }\n            } catch (err) {\n                console.warn(`Weather API failed for ${city.name}:`, err);\n            }\n        }\n        return weatherAlerts;\n    } catch (error) {\n        console.error('Error fetching weather alerts:', error);\n        return [];\n    }\n};\n// News API (Requires free API key) - Strictly disaster-focused\nconst fetchDisasterNews = async (query = 'earthquake OR hurricane OR wildfire OR flood OR tornado OR tsunami OR cyclone OR \"natural disaster\" OR \"emergency evacuation\" OR \"disaster zone\"')=>{\n    const apiKey = process.env.NEWS_API_KEY;\n    if (!apiKey || apiKey === 'your_news_api_key_here') {\n        console.warn('News API key not configured');\n        return {\n            articles: []\n        };\n    }\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://newsapi.org/v2/everything`, {\n            params: {\n                q: query,\n                sortBy: 'publishedAt',\n                language: 'en',\n                pageSize: 20,\n                from: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n                apiKey\n            },\n            timeout: 10000\n        });\n        // Filter out articles that are clearly not disaster-related\n        const disasterKeywords = [\n            'earthquake',\n            'hurricane',\n            'wildfire',\n            'flood',\n            'tornado',\n            'tsunami',\n            'cyclone',\n            'disaster',\n            'evacuation',\n            'emergency',\n            'storm',\n            'fire',\n            'flooding',\n            'quake',\n            'typhoon',\n            'blizzard',\n            'landslide',\n            'avalanche'\n        ];\n        const filteredArticles = response.data.articles.filter((article)=>{\n            const titleAndDesc = `${article.title} ${article.description}`.toLowerCase();\n            return disasterKeywords.some((keyword)=>titleAndDesc.includes(keyword));\n        });\n        return {\n            articles: filteredArticles\n        };\n    } catch (error) {\n        console.error('Error fetching disaster news:', error);\n        return {\n            articles: []\n        };\n    }\n};\n// Transform earthquake data to disaster format\nconst transformEarthquakeData = (earthquakeData)=>{\n    return earthquakeData.features.map((feature)=>{\n        const { properties, geometry } = feature;\n        const [lon, lat] = geometry.coordinates;\n        // Determine severity based on magnitude\n        let severity = 'low';\n        if (properties.mag >= 7) severity = 'critical';\n        else if (properties.mag >= 6) severity = 'high';\n        else if (properties.mag >= 5) severity = 'medium';\n        // Estimate affected people (rough calculation based on magnitude and population density)\n        const affected = Math.floor(Math.pow(properties.mag, 3) * Math.random() * 1000);\n        return {\n            id: feature.id,\n            type: 'earthquake',\n            title: properties.title,\n            location: {\n                lat,\n                lng: lon\n            },\n            magnitude: properties.mag,\n            time: new Date(properties.time).toISOString(),\n            severity,\n            affected,\n            description: `${properties.place} - Magnitude ${properties.mag} earthquake`,\n            url: properties.url,\n            source: 'usgs'\n        };\n    });\n};\n// Mock data for other disaster types (you can replace these with real APIs)\nconst generateMockWildfires = ()=>{\n    const wildfires = [\n        {\n            location: {\n                lat: 34.0522,\n                lng: -118.2437\n            },\n            title: 'Thomas Fire',\n            severity: 'high'\n        },\n        {\n            location: {\n                lat: 37.7749,\n                lng: -122.4194\n            },\n            title: 'North Bay Fire',\n            severity: 'medium'\n        },\n        {\n            location: {\n                lat: 45.5152,\n                lng: -122.6784\n            },\n            title: 'Eagle Creek Fire',\n            severity: 'critical'\n        }\n    ];\n    return wildfires.map((fire, index)=>({\n            id: `wildfire-${index}`,\n            type: 'wildfire',\n            title: fire.title,\n            location: fire.location,\n            magnitude: Math.random() * 5 + 1,\n            time: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),\n            severity: fire.severity,\n            affected: Math.floor(Math.random() * 50000 + 1000),\n            description: `Active wildfire in the ${fire.title} area`,\n            url: '#'\n        }));\n};\nconst generateMockHurricanes = ()=>{\n    const hurricanes = [\n        {\n            location: {\n                lat: 25.7617,\n                lng: -80.1918\n            },\n            title: 'Hurricane Maria',\n            severity: 'critical'\n        },\n        {\n            location: {\n                lat: 29.7604,\n                lng: -95.3698\n            },\n            title: 'Hurricane Harvey',\n            severity: 'high'\n        }\n    ];\n    return hurricanes.map((hurricane, index)=>({\n            id: `hurricane-${index}`,\n            type: 'hurricane',\n            title: hurricane.title,\n            location: hurricane.location,\n            magnitude: Math.random() * 2 + 3,\n            time: new Date(Date.now() - Math.random() * 3 * 24 * 60 * 60 * 1000).toISOString(),\n            severity: hurricane.severity,\n            affected: Math.floor(Math.random() * 500000 + 10000),\n            description: `Active hurricane system in the Atlantic`,\n            url: '#'\n        }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WjtLQUNEO0lBRUQsT0FBTzRELFdBQVdYLEdBQUcsQ0FBQyxDQUFDWSxXQUFXckMsUUFBVztZQUMzQ2pDLElBQUksQ0FBQyxVQUFVLEVBQUVpQyxPQUFPO1lBQ3hCaEMsTUFBTTtZQUNOQyxPQUFPb0UsVUFBVXBFLEtBQUs7WUFDdEJDLFVBQVVtRSxVQUFVbkUsUUFBUTtZQUM1QkksV0FBV1osS0FBS2lCLE1BQU0sS0FBSyxJQUFJO1lBQy9CSixNQUFNLElBQUl0QyxLQUFLQSxLQUFLRyxHQUFHLEtBQUtzQixLQUFLaUIsTUFBTSxLQUFLLElBQUksS0FBSyxLQUFLLEtBQUssTUFBTXpDLFdBQVc7WUFDaEZzQyxVQUFVNkQsVUFBVTdELFFBQVE7WUFDNUJDLFVBQVVmLEtBQUtnQixLQUFLLENBQUNoQixLQUFLaUIsTUFBTSxLQUFLLFNBQVM7WUFDOUNDLGFBQWEsQ0FBQyx1Q0FBdUMsQ0FBQztZQUN0REMsS0FBSztRQUNQO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBU1VTXFxEb3dubG9hZHNcXGRpc2FzdGVyLWRhc2hib2FyZFxcbGliXFxkaXNhc3Rlci1hcGkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuXG4vLyBUeXBlcyBmb3IgQVBJIHJlc3BvbnNlc1xuZXhwb3J0IGludGVyZmFjZSBFYXJ0aHF1YWtlRGF0YSB7XG4gIGZlYXR1cmVzOiBBcnJheTx7XG4gICAgaWQ6IHN0cmluZ1xuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIG1hZzogbnVtYmVyXG4gICAgICBwbGFjZTogc3RyaW5nXG4gICAgICB0aW1lOiBudW1iZXJcbiAgICAgIHVwZGF0ZWQ6IG51bWJlclxuICAgICAgdHo6IG51bWJlclxuICAgICAgdXJsOiBzdHJpbmdcbiAgICAgIGRldGFpbDogc3RyaW5nXG4gICAgICBmZWx0OiBudW1iZXIgfCBudWxsXG4gICAgICBjZGk6IG51bWJlciB8IG51bGxcbiAgICAgIG1taTogbnVtYmVyIHwgbnVsbFxuICAgICAgYWxlcnQ6IHN0cmluZyB8IG51bGxcbiAgICAgIHN0YXR1czogc3RyaW5nXG4gICAgICB0c3VuYW1pOiBudW1iZXJcbiAgICAgIHNpZzogbnVtYmVyXG4gICAgICBuZXQ6IHN0cmluZ1xuICAgICAgY29kZTogc3RyaW5nXG4gICAgICBpZHM6IHN0cmluZ1xuICAgICAgc291cmNlczogc3RyaW5nXG4gICAgICB0eXBlczogc3RyaW5nXG4gICAgICBuc3Q6IG51bWJlciB8IG51bGxcbiAgICAgIGRtaW46IG51bWJlciB8IG51bGxcbiAgICAgIHJtczogbnVtYmVyXG4gICAgICBnYXA6IG51bWJlciB8IG51bGxcbiAgICAgIG1hZ1R5cGU6IHN0cmluZ1xuICAgICAgdHlwZTogc3RyaW5nXG4gICAgICB0aXRsZTogc3RyaW5nXG4gICAgfVxuICAgIGdlb21ldHJ5OiB7XG4gICAgICB0eXBlOiBzdHJpbmdcbiAgICAgIGNvb3JkaW5hdGVzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl1cbiAgICB9XG4gIH0+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2VhdGhlckFsZXJ0IHtcbiAgZXZlbnQ6IHN0cmluZ1xuICBzdGFydDogbnVtYmVyXG4gIGVuZDogbnVtYmVyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcbiAgc2VuZGVyX25hbWU6IHN0cmluZ1xuICB0YWdzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYXRoZXJEYXRhIHtcbiAgY29vcmQ6IHtcbiAgICBsb246IG51bWJlclxuICAgIGxhdDogbnVtYmVyXG4gIH1cbiAgd2VhdGhlcjogQXJyYXk8e1xuICAgIGlkOiBudW1iZXJcbiAgICBtYWluOiBzdHJpbmdcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gICAgaWNvbjogc3RyaW5nXG4gIH0+XG4gIGFsZXJ0cz86IFdlYXRoZXJBbGVydFtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2lsZGZpcmVEYXRhIHtcbiAgZmVhdHVyZXM6IEFycmF5PHtcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBJbmNpZGVudE5hbWU6IHN0cmluZ1xuICAgICAgRmlyZURpc2NvdmVyeURhdGVUaW1lOiBudW1iZXJcbiAgICAgIERhaWx5QWNyZXM6IG51bWJlclxuICAgICAgUGVyY2VudENvbnRhaW5lZDogbnVtYmVyXG4gICAgICBYOiBudW1iZXJcbiAgICAgIFk6IG51bWJlclxuICAgICAgSW5jaWRlbnRTaG9ydERlc2NyaXB0aW9uOiBzdHJpbmdcbiAgICAgIFBPT1N0YXRlOiBzdHJpbmdcbiAgICB9XG4gIH0+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmV3c0FydGljbGUge1xuICBzb3VyY2U6IHtcbiAgICBpZDogc3RyaW5nXG4gICAgbmFtZTogc3RyaW5nXG4gIH1cbiAgYXV0aG9yOiBzdHJpbmdcbiAgdGl0bGU6IHN0cmluZ1xuICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gIHVybDogc3RyaW5nXG4gIHVybFRvSW1hZ2U6IHN0cmluZ1xuICBwdWJsaXNoZWRBdDogc3RyaW5nXG4gIGNvbnRlbnQ6IHN0cmluZ1xufVxuXG4vLyBVU0dTIEVhcnRocXVha2UgQVBJIChGcmVlLCBubyBrZXkgcmVxdWlyZWQpXG5leHBvcnQgY29uc3QgZmV0Y2hFYXJ0aHF1YWtlRGF0YSA9IGFzeW5jIChtaW5NYWduaXR1ZGUgPSA0LjAsIGRheXNCYWNrID0gNykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGVuZHRpbWUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICBjb25zdCBzdGFydHRpbWUgPSBuZXcgRGF0ZShEYXRlLm5vdygpIC0gZGF5c0JhY2sgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpXG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQ8RWFydGhxdWFrZURhdGE+KFxuICAgICAgYGh0dHBzOi8vZWFydGhxdWFrZS51c2dzLmdvdi9mZHNud3MvZXZlbnQvMS9xdWVyeWAsXG4gICAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGZvcm1hdDogJ2dlb2pzb24nLFxuICAgICAgICAgIHN0YXJ0dGltZTogc3RhcnR0aW1lLFxuICAgICAgICAgIGVuZHRpbWU6IGVuZHRpbWUsXG4gICAgICAgICAgbWlubWFnbml0dWRlOiBtaW5NYWduaXR1ZGUsXG4gICAgICAgICAgbGltaXQ6IDEwMCxcbiAgICAgICAgICBvcmRlcmJ5OiAndGltZS1hc2MnXG4gICAgICAgIH0sXG4gICAgICAgIHRpbWVvdXQ6IDEwMDAwXG4gICAgICB9XG4gICAgKVxuICAgIFxuICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgZWFydGhxdWFrZSBkYXRhOicsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLy8gTkFTQSBGSVJNUyBXaWxkZmlyZSBBUEkgKEZyZWUsIG5vIGtleSByZXF1aXJlZClcbmV4cG9ydCBjb25zdCBmZXRjaFdpbGRmaXJlRGF0YSA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKClcbiAgICBjb25zdCB5ZXN0ZXJkYXkgPSBuZXcgRGF0ZSh0b2RheS5nZXRUaW1lKCkgLSAyNCAqIDYwICogNjAgKiAxMDAwKVxuICAgIGNvbnN0IGRhdGVTdHIgPSB5ZXN0ZXJkYXkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdXG4gICAgXG4gICAgLy8gVXNpbmcgTkFTQSBGSVJNUyBNT0RJUyBkYXRhIChmcmVlLCBubyBBUEkga2V5IHJlcXVpcmVkKVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KFxuICAgICAgYGh0dHBzOi8vZmlybXMubW9kYXBzLmVvc2Rpcy5uYXNhLmdvdi9kYXRhL2FjdGl2ZV9maXJlL21vZGlzLWM2LjEvY3N2L01PRElTX0M2XzFfR2xvYmFsXzI0aC5jc3ZgLFxuICAgICAgeyB0aW1lb3V0OiAxMDAwMCB9XG4gICAgKVxuICAgIFxuICAgIC8vIFBhcnNlIENTViBkYXRhXG4gICAgY29uc3QgbGluZXMgPSByZXNwb25zZS5kYXRhLnNwbGl0KCdcXG4nKVxuICAgIGNvbnN0IGhlYWRlcnMgPSBsaW5lc1swXS5zcGxpdCgnLCcpXG4gICAgY29uc3Qgd2lsZGZpcmVzID0gW11cbiAgICBcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IE1hdGgubWluKGxpbmVzLmxlbmd0aCwgNTApOyBpKyspIHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IGxpbmVzW2ldLnNwbGl0KCcsJylcbiAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID49IDkpIHtcbiAgICAgICAgd2lsZGZpcmVzLnB1c2goe1xuICAgICAgICAgIGlkOiBgd2lsZGZpcmUtJHtpfWAsXG4gICAgICAgICAgdHlwZTogJ3dpbGRmaXJlJyxcbiAgICAgICAgICB0aXRsZTogYEFjdGl2ZSBGaXJlIC0gJHt2YWx1ZXNbN10gfHwgJ1Vua25vd24gTG9jYXRpb24nfWAsXG4gICAgICAgICAgbG9jYXRpb246IHsgXG4gICAgICAgICAgICBsYXQ6IHBhcnNlRmxvYXQodmFsdWVzWzBdKSB8fCAwLCBcbiAgICAgICAgICAgIGxuZzogcGFyc2VGbG9hdCh2YWx1ZXNbMV0pIHx8IDAgXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtYWduaXR1ZGU6IHBhcnNlRmxvYXQodmFsdWVzWzhdKSB8fCAzMDAsIC8vIEJyaWdodG5lc3NcbiAgICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgc2V2ZXJpdHk6IHBhcnNlRmxvYXQodmFsdWVzWzhdKSA+IDM1MCA/ICdjcml0aWNhbCcgOiBwYXJzZUZsb2F0KHZhbHVlc1s4XSkgPiAzMjAgPyAnaGlnaCcgOiAnbWVkaXVtJyxcbiAgICAgICAgICBhZmZlY3RlZDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNTAwMCArIDEwMCksXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBBY3RpdmUgZmlyZSBkZXRlY3RlZCB2aWEgc2F0ZWxsaXRlLiBCcmlnaHRuZXNzOiAke3ZhbHVlc1s4XX1gLFxuICAgICAgICAgIHVybDogJ2h0dHBzOi8vZmlybXMubW9kYXBzLmVvc2Rpcy5uYXNhLmdvdi8nLFxuICAgICAgICAgIHNvdXJjZTogJ25hc2EnIGFzIGNvbnN0XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB3aWxkZmlyZXMuc2xpY2UoMCwgMjApIC8vIExpbWl0IHRvIDIwIG1vc3QgcmVjZW50XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgd2lsZGZpcmUgZGF0YTonLCBlcnJvcilcbiAgICByZXR1cm4gW11cbiAgfVxufVxuXG4vLyBPcGVuV2VhdGhlck1hcCBBUEkgZm9yIHNldmVyZSB3ZWF0aGVyXG5leHBvcnQgY29uc3QgZmV0Y2hXZWF0aGVyQWxlcnRzID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBhcGlLZXkgPSBwcm9jZXNzLmVudi5PUEVOV0VBVEhFUl9BUElfS0VZXG4gIFxuICBpZiAoIWFwaUtleSB8fCBhcGlLZXkgPT09ICd5b3VyX29wZW53ZWF0aGVyX2FwaV9rZXlfaGVyZScpIHtcbiAgICBjb25zb2xlLndhcm4oJ09wZW5XZWF0aGVyTWFwIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQnKVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBHZXQgd2VhdGhlciBhbGVydHMgZm9yIG1ham9yIGNpdGllc1xuICAgIGNvbnN0IGNpdGllcyA9IFtcbiAgICAgIHsgbmFtZTogJ05ldyBZb3JrJywgbGF0OiA0MC43MTI4LCBsb246IC03NC4wMDYwIH0sXG4gICAgICB7IG5hbWU6ICdMb3MgQW5nZWxlcycsIGxhdDogMzQuMDUyMiwgbG9uOiAtMTE4LjI0MzcgfSxcbiAgICAgIHsgbmFtZTogJ0NoaWNhZ28nLCBsYXQ6IDQxLjg3ODEsIGxvbjogLTg3LjYyOTggfSxcbiAgICAgIHsgbmFtZTogJ0hvdXN0b24nLCBsYXQ6IDI5Ljc2MDQsIGxvbjogLTk1LjM2OTggfSxcbiAgICAgIHsgbmFtZTogJ01pYW1pJywgbGF0OiAyNS43NjE3LCBsb246IC04MC4xOTE4IH0sXG4gICAgICB7IG5hbWU6ICdMb25kb24nLCBsYXQ6IDUxLjUwNzQsIGxvbjogLTAuMTI3OCB9LFxuICAgICAgeyBuYW1lOiAnVG9reW8nLCBsYXQ6IDM1LjY3NjIsIGxvbjogMTM5LjY1MDMgfSxcbiAgICAgIHsgbmFtZTogJ1N5ZG5leScsIGxhdDogLTMzLjg2ODgsIGxvbjogMTUxLjIwOTMgfVxuICAgIF1cbiAgICBcbiAgICBjb25zdCB3ZWF0aGVyQWxlcnRzOiBBcnJheTx7XG4gICAgICBpZDogc3RyaW5nXG4gICAgICB0eXBlOiBzdHJpbmdcbiAgICAgIHRpdGxlOiBzdHJpbmdcbiAgICAgIGxvY2F0aW9uOiB7IGxhdDogbnVtYmVyOyBsbmc6IG51bWJlciB9XG4gICAgICBtYWduaXR1ZGU6IG51bWJlclxuICAgICAgdGltZTogc3RyaW5nXG4gICAgICBzZXZlcml0eTogc3RyaW5nXG4gICAgICBhZmZlY3RlZDogbnVtYmVyXG4gICAgICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gICAgICB1cmw6IHN0cmluZ1xuICAgICAgc291cmNlOiAnd2VhdGhlcidcbiAgICB9PiA9IFtdXG4gICAgXG4gICAgZm9yIChjb25zdCBjaXR5IG9mIGNpdGllcy5zbGljZSgwLCA0KSkgeyAvLyBMaW1pdCBBUEkgY2FsbHNcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KFxuICAgICAgICAgIGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvb25lY2FsbGAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgIGxhdDogY2l0eS5sYXQsXG4gICAgICAgICAgICAgIGxvbjogY2l0eS5sb24sXG4gICAgICAgICAgICAgIGFwcGlkOiBhcGlLZXksXG4gICAgICAgICAgICAgIGV4Y2x1ZGU6ICdtaW51dGVseSxob3VybHksZGFpbHknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGltZW91dDogNTAwMFxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuYWxlcnRzICYmIHJlc3BvbnNlLmRhdGEuYWxlcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXNwb25zZS5kYXRhLmFsZXJ0cy5mb3JFYWNoKChhbGVydDogV2VhdGhlckFsZXJ0LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICB3ZWF0aGVyQWxlcnRzLnB1c2goe1xuICAgICAgICAgICAgICBpZDogYHdlYXRoZXItJHtjaXR5Lm5hbWV9LSR7aW5kZXh9YCxcbiAgICAgICAgICAgICAgdHlwZTogYWxlcnQuZXZlbnQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnaHVycmljYW5lJykgPyAnaHVycmljYW5lJyA6IFxuICAgICAgICAgICAgICAgICAgICBhbGVydC5ldmVudC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCd0b3JuYWRvJykgPyAndG9ybmFkbycgOlxuICAgICAgICAgICAgICAgICAgICBhbGVydC5ldmVudC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdmbG9vZCcpID8gJ2Zsb29kJyA6ICdzZXZlcmVfd2VhdGhlcicsXG4gICAgICAgICAgICAgIHRpdGxlOiBgJHthbGVydC5ldmVudH0gLSAke2NpdHkubmFtZX1gLFxuICAgICAgICAgICAgICBsb2NhdGlvbjogeyBsYXQ6IGNpdHkubGF0LCBsbmc6IGNpdHkubG9uIH0sXG4gICAgICAgICAgICAgIG1hZ25pdHVkZTogMy41LFxuICAgICAgICAgICAgICB0aW1lOiBuZXcgRGF0ZShhbGVydC5zdGFydCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgIHNldmVyaXR5OiBhbGVydC5ldmVudC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCd3YXJuaW5nJykgPyAnaGlnaCcgOiAnbWVkaXVtJyxcbiAgICAgICAgICAgICAgYWZmZWN0ZWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwMDAwICsgMTAwMCksXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBhbGVydC5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgdXJsOiAnIycsXG4gICAgICAgICAgICAgIHNvdXJjZTogJ3dlYXRoZXInIGFzIGNvbnN0XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLndhcm4oYFdlYXRoZXIgQVBJIGZhaWxlZCBmb3IgJHtjaXR5Lm5hbWV9OmAsIGVycilcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHdlYXRoZXJBbGVydHNcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB3ZWF0aGVyIGFsZXJ0czonLCBlcnJvcilcbiAgICByZXR1cm4gW11cbiAgfVxufVxuXG4vLyBOZXdzIEFQSSAoUmVxdWlyZXMgZnJlZSBBUEkga2V5KSAtIFN0cmljdGx5IGRpc2FzdGVyLWZvY3VzZWRcbmV4cG9ydCBjb25zdCBmZXRjaERpc2FzdGVyTmV3cyA9IGFzeW5jIChxdWVyeSA9ICdlYXJ0aHF1YWtlIE9SIGh1cnJpY2FuZSBPUiB3aWxkZmlyZSBPUiBmbG9vZCBPUiB0b3JuYWRvIE9SIHRzdW5hbWkgT1IgY3ljbG9uZSBPUiBcIm5hdHVyYWwgZGlzYXN0ZXJcIiBPUiBcImVtZXJnZW5jeSBldmFjdWF0aW9uXCIgT1IgXCJkaXNhc3RlciB6b25lXCInKSA9PiB7XG4gIGNvbnN0IGFwaUtleSA9IHByb2Nlc3MuZW52Lk5FV1NfQVBJX0tFWVxuICBcbiAgaWYgKCFhcGlLZXkgfHwgYXBpS2V5ID09PSAneW91cl9uZXdzX2FwaV9rZXlfaGVyZScpIHtcbiAgICBjb25zb2xlLndhcm4oJ05ld3MgQVBJIGtleSBub3QgY29uZmlndXJlZCcpXG4gICAgcmV0dXJuIHsgYXJ0aWNsZXM6IFtdIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoXG4gICAgICBgaHR0cHM6Ly9uZXdzYXBpLm9yZy92Mi9ldmVyeXRoaW5nYCxcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgcTogcXVlcnksXG4gICAgICAgICAgc29ydEJ5OiAncHVibGlzaGVkQXQnLFxuICAgICAgICAgIGxhbmd1YWdlOiAnZW4nLFxuICAgICAgICAgIHBhZ2VTaXplOiAyMCxcbiAgICAgICAgICBmcm9tOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMyAqIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXSwgLy8gTGFzdCAzIGRheXNcbiAgICAgICAgICBhcGlLZXlcbiAgICAgICAgfSxcbiAgICAgICAgdGltZW91dDogMTAwMDBcbiAgICAgIH1cbiAgICApXG4gICAgXG4gICAgLy8gRmlsdGVyIG91dCBhcnRpY2xlcyB0aGF0IGFyZSBjbGVhcmx5IG5vdCBkaXNhc3Rlci1yZWxhdGVkXG4gICAgY29uc3QgZGlzYXN0ZXJLZXl3b3JkcyA9IFtcbiAgICAgICdlYXJ0aHF1YWtlJywgJ2h1cnJpY2FuZScsICd3aWxkZmlyZScsICdmbG9vZCcsICd0b3JuYWRvJywgJ3RzdW5hbWknLCBcbiAgICAgICdjeWNsb25lJywgJ2Rpc2FzdGVyJywgJ2V2YWN1YXRpb24nLCAnZW1lcmdlbmN5JywgJ3N0b3JtJywgJ2ZpcmUnLFxuICAgICAgJ2Zsb29kaW5nJywgJ3F1YWtlJywgJ3R5cGhvb24nLCAnYmxpenphcmQnLCAnbGFuZHNsaWRlJywgJ2F2YWxhbmNoZSdcbiAgICBdXG4gICAgXG4gICAgY29uc3QgZmlsdGVyZWRBcnRpY2xlcyA9IHJlc3BvbnNlLmRhdGEuYXJ0aWNsZXMuZmlsdGVyKChhcnRpY2xlOiBOZXdzQXJ0aWNsZSkgPT4ge1xuICAgICAgY29uc3QgdGl0bGVBbmREZXNjID0gYCR7YXJ0aWNsZS50aXRsZX0gJHthcnRpY2xlLmRlc2NyaXB0aW9ufWAudG9Mb3dlckNhc2UoKVxuICAgICAgcmV0dXJuIGRpc2FzdGVyS2V5d29yZHMuc29tZShrZXl3b3JkID0+IHRpdGxlQW5kRGVzYy5pbmNsdWRlcyhrZXl3b3JkKSlcbiAgICB9KVxuICAgIFxuICAgIHJldHVybiB7IGFydGljbGVzOiBmaWx0ZXJlZEFydGljbGVzIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBkaXNhc3RlciBuZXdzOicsIGVycm9yKVxuICAgIHJldHVybiB7IGFydGljbGVzOiBbXSB9XG4gIH1cbn1cblxuLy8gVHJhbnNmb3JtIGVhcnRocXVha2UgZGF0YSB0byBkaXNhc3RlciBmb3JtYXRcbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1FYXJ0aHF1YWtlRGF0YSA9IChlYXJ0aHF1YWtlRGF0YTogRWFydGhxdWFrZURhdGEpID0+IHtcbiAgcmV0dXJuIGVhcnRocXVha2VEYXRhLmZlYXR1cmVzLm1hcChmZWF0dXJlID0+IHtcbiAgICBjb25zdCB7IHByb3BlcnRpZXMsIGdlb21ldHJ5IH0gPSBmZWF0dXJlXG4gICAgY29uc3QgW2xvbiwgbGF0XSA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzXG4gICAgXG4gICAgLy8gRGV0ZXJtaW5lIHNldmVyaXR5IGJhc2VkIG9uIG1hZ25pdHVkZVxuICAgIGxldCBzZXZlcml0eSA9ICdsb3cnXG4gICAgaWYgKHByb3BlcnRpZXMubWFnID49IDcpIHNldmVyaXR5ID0gJ2NyaXRpY2FsJ1xuICAgIGVsc2UgaWYgKHByb3BlcnRpZXMubWFnID49IDYpIHNldmVyaXR5ID0gJ2hpZ2gnXG4gICAgZWxzZSBpZiAocHJvcGVydGllcy5tYWcgPj0gNSkgc2V2ZXJpdHkgPSAnbWVkaXVtJ1xuICAgIFxuICAgIC8vIEVzdGltYXRlIGFmZmVjdGVkIHBlb3BsZSAocm91Z2ggY2FsY3VsYXRpb24gYmFzZWQgb24gbWFnbml0dWRlIGFuZCBwb3B1bGF0aW9uIGRlbnNpdHkpXG4gICAgY29uc3QgYWZmZWN0ZWQgPSBNYXRoLmZsb29yKE1hdGgucG93KHByb3BlcnRpZXMubWFnLCAzKSAqIE1hdGgucmFuZG9tKCkgKiAxMDAwKVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBpZDogZmVhdHVyZS5pZCxcbiAgICAgIHR5cGU6ICdlYXJ0aHF1YWtlJyxcbiAgICAgIHRpdGxlOiBwcm9wZXJ0aWVzLnRpdGxlLFxuICAgICAgbG9jYXRpb246IHsgbGF0LCBsbmc6IGxvbiB9LFxuICAgICAgbWFnbml0dWRlOiBwcm9wZXJ0aWVzLm1hZyxcbiAgICAgIHRpbWU6IG5ldyBEYXRlKHByb3BlcnRpZXMudGltZSkudG9JU09TdHJpbmcoKSxcbiAgICAgIHNldmVyaXR5LFxuICAgICAgYWZmZWN0ZWQsXG4gICAgICBkZXNjcmlwdGlvbjogYCR7cHJvcGVydGllcy5wbGFjZX0gLSBNYWduaXR1ZGUgJHtwcm9wZXJ0aWVzLm1hZ30gZWFydGhxdWFrZWAsXG4gICAgICB1cmw6IHByb3BlcnRpZXMudXJsLFxuICAgICAgc291cmNlOiAndXNncycgYXMgY29uc3RcbiAgICB9XG4gIH0pXG59XG5cbi8vIE1vY2sgZGF0YSBmb3Igb3RoZXIgZGlzYXN0ZXIgdHlwZXMgKHlvdSBjYW4gcmVwbGFjZSB0aGVzZSB3aXRoIHJlYWwgQVBJcylcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZU1vY2tXaWxkZmlyZXMgPSAoKSA9PiB7XG4gIGNvbnN0IHdpbGRmaXJlcyA9IFtcbiAgICB7XG4gICAgICBsb2NhdGlvbjogeyBsYXQ6IDM0LjA1MjIsIGxuZzogLTExOC4yNDM3IH0sIC8vIExvcyBBbmdlbGVzXG4gICAgICB0aXRsZTogJ1Rob21hcyBGaXJlJyxcbiAgICAgIHNldmVyaXR5OiAnaGlnaCcgYXMgY29uc3RcbiAgICB9LFxuICAgIHtcbiAgICAgIGxvY2F0aW9uOiB7IGxhdDogMzcuNzc0OSwgbG5nOiAtMTIyLjQxOTQgfSwgLy8gU2FuIEZyYW5jaXNjb1xuICAgICAgdGl0bGU6ICdOb3J0aCBCYXkgRmlyZScsXG4gICAgICBzZXZlcml0eTogJ21lZGl1bScgYXMgY29uc3RcbiAgICB9LFxuICAgIHtcbiAgICAgIGxvY2F0aW9uOiB7IGxhdDogNDUuNTE1MiwgbG5nOiAtMTIyLjY3ODQgfSwgLy8gUG9ydGxhbmRcbiAgICAgIHRpdGxlOiAnRWFnbGUgQ3JlZWsgRmlyZScsXG4gICAgICBzZXZlcml0eTogJ2NyaXRpY2FsJyBhcyBjb25zdFxuICAgIH1cbiAgXVxuXG4gIHJldHVybiB3aWxkZmlyZXMubWFwKChmaXJlLCBpbmRleCkgPT4gKHtcbiAgICBpZDogYHdpbGRmaXJlLSR7aW5kZXh9YCxcbiAgICB0eXBlOiAnd2lsZGZpcmUnLFxuICAgIHRpdGxlOiBmaXJlLnRpdGxlLFxuICAgIGxvY2F0aW9uOiBmaXJlLmxvY2F0aW9uLFxuICAgIG1hZ25pdHVkZTogTWF0aC5yYW5kb20oKSAqIDUgKyAxLFxuICAgIHRpbWU6IG5ldyBEYXRlKERhdGUubm93KCkgLSBNYXRoLnJhbmRvbSgpICogNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgc2V2ZXJpdHk6IGZpcmUuc2V2ZXJpdHksXG4gICAgYWZmZWN0ZWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwMDAwICsgMTAwMCksXG4gICAgZGVzY3JpcHRpb246IGBBY3RpdmUgd2lsZGZpcmUgaW4gdGhlICR7ZmlyZS50aXRsZX0gYXJlYWAsXG4gICAgdXJsOiAnIydcbiAgfSkpXG59XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZU1vY2tIdXJyaWNhbmVzID0gKCkgPT4ge1xuICBjb25zdCBodXJyaWNhbmVzID0gW1xuICAgIHtcbiAgICAgIGxvY2F0aW9uOiB7IGxhdDogMjUuNzYxNywgbG5nOiAtODAuMTkxOCB9LCAvLyBNaWFtaVxuICAgICAgdGl0bGU6ICdIdXJyaWNhbmUgTWFyaWEnLFxuICAgICAgc2V2ZXJpdHk6ICdjcml0aWNhbCcgYXMgY29uc3RcbiAgICB9LFxuICAgIHtcbiAgICAgIGxvY2F0aW9uOiB7IGxhdDogMjkuNzYwNCwgbG5nOiAtOTUuMzY5OCB9LCAvLyBIb3VzdG9uXG4gICAgICB0aXRsZTogJ0h1cnJpY2FuZSBIYXJ2ZXknLFxuICAgICAgc2V2ZXJpdHk6ICdoaWdoJyBhcyBjb25zdFxuICAgIH1cbiAgXVxuXG4gIHJldHVybiBodXJyaWNhbmVzLm1hcCgoaHVycmljYW5lLCBpbmRleCkgPT4gKHtcbiAgICBpZDogYGh1cnJpY2FuZS0ke2luZGV4fWAsXG4gICAgdHlwZTogJ2h1cnJpY2FuZScsXG4gICAgdGl0bGU6IGh1cnJpY2FuZS50aXRsZSxcbiAgICBsb2NhdGlvbjogaHVycmljYW5lLmxvY2F0aW9uLFxuICAgIG1hZ25pdHVkZTogTWF0aC5yYW5kb20oKSAqIDIgKyAzLCAvLyBDYXRlZ29yeSAzLTVcbiAgICB0aW1lOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gTWF0aC5yYW5kb20oKSAqIDMgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxuICAgIHNldmVyaXR5OiBodXJyaWNhbmUuc2V2ZXJpdHksXG4gICAgYWZmZWN0ZWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwMDAwMCArIDEwMDAwKSxcbiAgICBkZXNjcmlwdGlvbjogYEFjdGl2ZSBodXJyaWNhbmUgc3lzdGVtIGluIHRoZSBBdGxhbnRpY2AsXG4gICAgdXJsOiAnIydcbiAgfSkpXG59XG4iXSwibmFtZXMiOlsiYXhpb3MiLCJmZXRjaEVhcnRocXVha2VEYXRhIiwibWluTWFnbml0dWRlIiwiZGF5c0JhY2siLCJlbmR0aW1lIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic3RhcnR0aW1lIiwibm93IiwicmVzcG9uc2UiLCJnZXQiLCJwYXJhbXMiLCJmb3JtYXQiLCJtaW5tYWduaXR1ZGUiLCJsaW1pdCIsIm9yZGVyYnkiLCJ0aW1lb3V0IiwiZGF0YSIsImVycm9yIiwiY29uc29sZSIsImZldGNoV2lsZGZpcmVEYXRhIiwidG9kYXkiLCJ5ZXN0ZXJkYXkiLCJnZXRUaW1lIiwiZGF0ZVN0ciIsInNwbGl0IiwibGluZXMiLCJoZWFkZXJzIiwid2lsZGZpcmVzIiwiaSIsIk1hdGgiLCJtaW4iLCJsZW5ndGgiLCJ2YWx1ZXMiLCJwdXNoIiwiaWQiLCJ0eXBlIiwidGl0bGUiLCJsb2NhdGlvbiIsImxhdCIsInBhcnNlRmxvYXQiLCJsbmciLCJtYWduaXR1ZGUiLCJ0aW1lIiwic2V2ZXJpdHkiLCJhZmZlY3RlZCIsImZsb29yIiwicmFuZG9tIiwiZGVzY3JpcHRpb24iLCJ1cmwiLCJzb3VyY2UiLCJzbGljZSIsImZldGNoV2VhdGhlckFsZXJ0cyIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJPUEVOV0VBVEhFUl9BUElfS0VZIiwid2FybiIsImNpdGllcyIsIm5hbWUiLCJsb24iLCJ3ZWF0aGVyQWxlcnRzIiwiY2l0eSIsImFwcGlkIiwiZXhjbHVkZSIsImFsZXJ0cyIsImZvckVhY2giLCJhbGVydCIsImluZGV4IiwiZXZlbnQiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwic3RhcnQiLCJlcnIiLCJmZXRjaERpc2FzdGVyTmV3cyIsInF1ZXJ5IiwiTkVXU19BUElfS0VZIiwiYXJ0aWNsZXMiLCJxIiwic29ydEJ5IiwibGFuZ3VhZ2UiLCJwYWdlU2l6ZSIsImZyb20iLCJkaXNhc3RlcktleXdvcmRzIiwiZmlsdGVyZWRBcnRpY2xlcyIsImZpbHRlciIsImFydGljbGUiLCJ0aXRsZUFuZERlc2MiLCJzb21lIiwia2V5d29yZCIsInRyYW5zZm9ybUVhcnRocXVha2VEYXRhIiwiZWFydGhxdWFrZURhdGEiLCJmZWF0dXJlcyIsIm1hcCIsImZlYXR1cmUiLCJwcm9wZXJ0aWVzIiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsIm1hZyIsInBvdyIsInBsYWNlIiwiZ2VuZXJhdGVNb2NrV2lsZGZpcmVzIiwiZmlyZSIsImdlbmVyYXRlTW9ja0h1cnJpY2FuZXMiLCJodXJyaWNhbmVzIiwiaHVycmljYW5lIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/disaster-api.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdisasters%2Froute&page=%2Fapi%2Fdisasters%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdisasters%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdisasters%2Froute&page=%2Fapi%2Fdisasters%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdisasters%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_ASUS_Downloads_disaster_dashboard_app_api_disasters_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/disasters/route.ts */ \"(rsc)/./app/api/disasters/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/disasters/route\",\n        pathname: \"/api/disasters\",\n        filename: \"route\",\n        bundlePath: \"app/api/disasters/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\ASUS\\\\Downloads\\\\disaster-dashboard\\\\app\\\\api\\\\disasters\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_ASUS_Downloads_disaster_dashboard_app_api_disasters_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZkaXNhc3RlcnMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmRpc2FzdGVycyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmRpc2FzdGVycyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNBU1VTJTVDRG93bmxvYWRzJTVDZGlzYXN0ZXItZGFzaGJvYXJkJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNBU1VTJTVDRG93bmxvYWRzJTVDZGlzYXN0ZXItZGFzaGJvYXJkJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUM2QjtBQUMxRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcQVNVU1xcXFxEb3dubG9hZHNcXFxcZGlzYXN0ZXItZGFzaGJvYXJkXFxcXGFwcFxcXFxhcGlcXFxcZGlzYXN0ZXJzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9kaXNhc3RlcnMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kaXNhc3RlcnNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2Rpc2FzdGVycy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXEFTVVNcXFxcRG93bmxvYWRzXFxcXGRpc2FzdGVyLWRhc2hib2FyZFxcXFxhcHBcXFxcYXBpXFxcXGRpc2FzdGVyc1xcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdisasters%2Froute&page=%2Fapi%2Fdisasters%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdisasters%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?4c03":
/*!***********************!*\
  !*** debug (ignored) ***!
  \***********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/axios","vendor-chunks/asynckit","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/call-bind-apply-helpers","vendor-chunks/get-proto","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/proxy-from-env","vendor-chunks/mime-types","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdisasters%2Froute&page=%2Fapi%2Fdisasters%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdisasters%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();