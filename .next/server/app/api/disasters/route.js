/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/disasters/route";
exports.ids = ["app/api/disasters/route"];
exports.modules = {

/***/ "(rsc)/./app/api/disasters/route.ts":
/*!************************************!*\
  !*** ./app/api/disasters/route.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_disaster_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/disaster-api */ \"(rsc)/./lib/disaster-api.ts\");\n\n\n// NASA EONET API for natural disasters\nasync function fetchNASAEvents() {\n    try {\n        const response = await fetch(\"https://eonet.gsfc.nasa.gov/api/v3/events?limit=50&status=open\", {\n            next: {\n                revalidate: 300\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch NASA EONET data\");\n        }\n        const data = await response.json();\n        return data.events || [];\n    } catch (error) {\n        console.error(\"NASA EONET API error:\", error);\n        return [];\n    }\n}\n// USGS Earthquake API\nasync function fetchUSGSEarthquakes() {\n    try {\n        const data = await (0,_lib_disaster_api__WEBPACK_IMPORTED_MODULE_1__.fetchEarthquakeData)();\n        return {\n            data: data.features,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"USGS API error:\", error);\n        return {\n            data: [],\n            error: error?.message || \"Unknown error\"\n        };\n    }\n}\n// OpenWeatherMap API for severe weather\nasync function fetchWeatherAlerts() {\n    const apiKey = process.env.OPENWEATHER_API_KEY;\n    if (!apiKey) {\n        console.warn(\"OpenWeatherMap API key not configured\");\n        return [];\n    }\n    try {\n        // Example coordinates for major cities worldwide\n        const locations = [\n            {\n                name: \"Los Angeles\",\n                lat: 34.0522,\n                lon: -118.2437\n            },\n            {\n                name: \"Miami\",\n                lat: 25.7617,\n                lon: -80.1918\n            },\n            {\n                name: \"Houston\",\n                lat: 29.7604,\n                lon: -95.3698\n            },\n            {\n                name: \"New York\",\n                lat: 40.7128,\n                lon: -74.006\n            },\n            {\n                name: \"Tokyo\",\n                lat: 35.6762,\n                lon: 139.6503\n            },\n            {\n                name: \"London\",\n                lat: 51.5074,\n                lon: -0.1278\n            },\n            {\n                name: \"Sydney\",\n                lat: -33.8688,\n                lon: 151.2093\n            },\n            {\n                name: \"Mumbai\",\n                lat: 19.0760,\n                lon: 72.8777\n            }\n        ];\n        const weatherPromises = locations.map(async (location)=>{\n            try {\n                const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${location.lat}&lon=${location.lon}&appid=${apiKey}&units=metric`, {\n                    next: {\n                        revalidate: 1800\n                    }\n                });\n                if (response.ok) {\n                    const data = await response.json();\n                    return {\n                        ...data,\n                        locationName: location.name\n                    };\n                }\n                return null;\n            } catch (err) {\n                console.warn(`Weather API failed for ${location.name}:`, err);\n                return null;\n            }\n        });\n        const results = await Promise.all(weatherPromises);\n        return results.filter(Boolean);\n    } catch (error) {\n        console.error(\"OpenWeatherMap API error:\", error);\n        return [];\n    }\n}\n// NewsAPI for disaster-related news\nasync function fetchDisasterNews() {\n    const apiKey = process.env.NEWS_API_KEY;\n    if (!apiKey) {\n        console.warn(\"NewsAPI key not configured\");\n        return [];\n    }\n    try {\n        // Search for disaster-related news from the past 7 days\n        const searchTerms = [\n            'earthquake disaster',\n            'wildfire emergency',\n            'hurricane disaster',\n            'flood emergency',\n            'tornado disaster',\n            'tsunami warning',\n            'volcanic eruption',\n            'natural disaster'\n        ];\n        // Randomly select a search term to avoid hitting API limits\n        const searchTerm = searchTerms[Math.floor(Math.random() * searchTerms.length)];\n        const response = await fetch(`https://newsapi.org/v2/everything?q=${encodeURIComponent(searchTerm)}&sortBy=publishedAt&language=en&pageSize=20&from=${new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}`, {\n            headers: {\n                'X-API-Key': apiKey\n            },\n            next: {\n                revalidate: 1800\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`NewsAPI request failed: ${response.status}`);\n        }\n        const data = await response.json();\n        return data.articles || [];\n    } catch (error) {\n        console.error(\"NewsAPI error:\", error);\n        return [];\n    }\n}\nasync function GET() {\n    try {\n        // Fetch data from all sources in parallel\n        const [nasaEvents, usgsResult, weatherData, newsArticles] = await Promise.all([\n            fetchNASAEvents(),\n            fetchUSGSEarthquakes(),\n            fetchWeatherAlerts(),\n            fetchDisasterNews()\n        ]);\n        // Transform and combine the data\n        const disasters = [];\n        // Process NASA EONET events\n        nasaEvents.forEach((event)=>{\n            if (event.geometry && event.geometry.length > 0) {\n                const geometry = event.geometry[event.geometry.length - 1] // Get latest geometry\n                ;\n                const coords = geometry.coordinates;\n                // Map NASA categories to our disaster types\n                let disasterType = \"unknown\";\n                let severity = \"medium\";\n                if (event.categories && event.categories.length > 0) {\n                    const category = event.categories[0].title.toLowerCase();\n                    if (category.includes(\"wildfire\")) {\n                        disasterType = \"wildfire\";\n                        severity = \"high\";\n                    } else if (category.includes(\"volcano\")) {\n                        disasterType = \"volcano\";\n                        severity = \"critical\";\n                    } else if (category.includes(\"storm\")) {\n                        disasterType = \"storm\";\n                        severity = \"high\";\n                    } else if (category.includes(\"flood\")) {\n                        disasterType = \"flood\";\n                        severity = \"high\";\n                    }\n                }\n                disasters.push({\n                    id: `nasa-${event.id}`,\n                    type: disasterType,\n                    title: event.title,\n                    location: {\n                        lat: coords[1],\n                        lng: coords[0]\n                    },\n                    magnitude: disasterType === \"wildfire\" ? Math.random() * 100 + 50 : Math.random() * 10 + 1,\n                    time: geometry.date,\n                    severity: severity,\n                    affected: Math.floor(Math.random() * 50000) + 1000,\n                    source: \"nasa\",\n                    description: event.description || `${disasterType.charAt(0).toUpperCase() + disasterType.slice(1)} event monitored by NASA EONET`,\n                    url: event.sources && event.sources.length > 0 ? event.sources[0].url : \"https://eonet.gsfc.nasa.gov/\"\n                });\n            }\n        });\n        // Process USGS earthquakes\n        usgsResult.data.forEach((earthquake)=>{\n            const props = earthquake.properties;\n            const coords = earthquake.geometry.coordinates;\n            disasters.push({\n                id: `usgs-${earthquake.id}`,\n                type: \"earthquake\",\n                title: props.title,\n                location: {\n                    lat: coords[1],\n                    lng: coords[0]\n                },\n                magnitude: props.mag,\n                time: new Date(props.time).toISOString(),\n                severity: props.mag >= 7 ? \"critical\" : props.mag >= 5 ? \"high\" : \"medium\",\n                affected: Math.floor(props.mag * 10000),\n                source: \"usgs\",\n                description: props.place,\n                url: props.url\n            });\n        });\n        // Process weather alerts (severe weather conditions)\n        weatherData.forEach((weather, index)=>{\n            const windSpeed = weather.wind?.speed || 0;\n            const weatherMain = weather.weather[0].main;\n            // Only include severe weather conditions\n            if (weatherMain === \"Thunderstorm\" || windSpeed > 15 || weatherMain === \"Tornado\") {\n                let severity = \"medium\";\n                let disasterType = \"storm\";\n                if (weatherMain === \"Tornado\") {\n                    severity = \"critical\";\n                    disasterType = \"tornado\";\n                } else if (windSpeed > 25) {\n                    severity = \"high\";\n                    disasterType = \"hurricane\";\n                } else if (weatherMain === \"Thunderstorm\") {\n                    severity = windSpeed > 20 ? \"high\" : \"medium\";\n                    disasterType = \"storm\";\n                }\n                disasters.push({\n                    id: `weather-${weather.id}-${Date.now()}-${index}`,\n                    type: disasterType,\n                    title: `Severe Weather Alert - ${weather.locationName}`,\n                    location: {\n                        lat: weather.coord.lat,\n                        lng: weather.coord.lon\n                    },\n                    magnitude: windSpeed || weather.main.temp,\n                    time: new Date().toISOString(),\n                    severity: severity,\n                    affected: Math.floor(Math.random() * 10000) + 500,\n                    source: \"weather\",\n                    description: `${weather.weather[0].description} - Wind: ${windSpeed}m/s, Temp: ${weather.main.temp}°C`,\n                    url: \"\"\n                });\n            }\n        });\n        // Process news articles\n        newsArticles.forEach((article, index)=>{\n            if (article.title && article.description && article.url) {\n                // Extract disaster type from title/description\n                const content = `${article.title} ${article.description}`.toLowerCase();\n                let disasterType = \"unknown\";\n                let severity = \"medium\";\n                // Determine disaster type from content\n                if (content.includes('earthquake') || content.includes('quake')) {\n                    disasterType = \"earthquake\";\n                    severity = content.includes('major') || content.includes('devastating') ? \"critical\" : \"high\";\n                } else if (content.includes('wildfire') || content.includes('fire')) {\n                    disasterType = \"wildfire\";\n                    severity = content.includes('evacuate') || content.includes('emergency') ? \"critical\" : \"high\";\n                } else if (content.includes('hurricane') || content.includes('typhoon')) {\n                    disasterType = \"hurricane\";\n                    severity = content.includes('category') || content.includes('landfall') ? \"critical\" : \"high\";\n                } else if (content.includes('flood') || content.includes('flooding')) {\n                    disasterType = \"flood\";\n                    severity = content.includes('flash') || content.includes('emergency') ? \"critical\" : \"high\";\n                } else if (content.includes('tornado')) {\n                    disasterType = \"tornado\";\n                    severity = \"critical\";\n                } else if (content.includes('tsunami')) {\n                    disasterType = \"tsunami\";\n                    severity = \"critical\";\n                } else if (content.includes('storm') || content.includes('cyclone')) {\n                    disasterType = \"storm\";\n                    severity = content.includes('severe') ? \"high\" : \"medium\";\n                } else if (content.includes('volcano') || content.includes('eruption')) {\n                    disasterType = \"volcano\";\n                    severity = content.includes('major') ? \"critical\" : \"high\";\n                }\n                // Only include if we can identify a disaster type\n                if (disasterType !== \"unknown\") {\n                    // Generate estimated coordinates (this is a limitation of news data)\n                    const estimatedCoords = generateEstimatedCoordinates(article.title, article.description);\n                    // Create unique ID using URL hash, timestamp, and index\n                    const urlHash = article.url.split('/').pop() || article.title.slice(0, 20).replace(/\\s/g, '');\n                    const uniqueId = `news-${urlHash}-${Date.now()}-${index}`;\n                    disasters.push({\n                        id: uniqueId,\n                        type: disasterType,\n                        title: article.title,\n                        location: estimatedCoords,\n                        magnitude: getEstimatedMagnitude(content, disasterType),\n                        time: article.publishedAt,\n                        severity: severity,\n                        affected: getEstimatedAffected(content, disasterType),\n                        source: \"news\",\n                        description: article.description,\n                        url: article.url,\n                        newsArticle: article\n                    });\n                }\n            }\n        });\n        // Add current India flood data (July 2025 monsoon season)\n        const currentIndiaFloods = [\n            {\n                id: \"india-flood-assam-2025\",\n                type: \"flood\",\n                title: \"Severe Monsoon Flooding in Assam, India\",\n                location: {\n                    lat: 26.2006,\n                    lng: 92.9376\n                },\n                magnitude: 8.5,\n                time: new Date().toISOString(),\n                severity: \"critical\",\n                affected: 450000,\n                source: \"local\",\n                description: \"Heavy monsoon rains have caused severe flooding across Assam state, affecting over 450,000 people. Multiple districts submerged with emergency evacuations ongoing.\",\n                url: \"https://ndma.gov.in/\"\n            },\n            {\n                id: \"india-flood-bihar-2025\",\n                type: \"flood\",\n                title: \"Flash Floods in Bihar Due to Heavy Rainfall\",\n                location: {\n                    lat: 25.0961,\n                    lng: 85.3131\n                },\n                magnitude: 7.2,\n                time: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                severity: \"high\",\n                affected: 280000,\n                source: \"local\",\n                description: \"Continuous rainfall has led to flash flooding in multiple districts of Bihar. Rivers are flowing above danger levels.\",\n                url: \"https://ndma.gov.in/\"\n            },\n            {\n                id: \"india-flood-west-bengal-2025\",\n                type: \"flood\",\n                title: \"Urban Flooding in Kolkata After Heavy Downpour\",\n                location: {\n                    lat: 22.5726,\n                    lng: 88.3639\n                },\n                magnitude: 6.8,\n                time: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                severity: \"high\",\n                affected: 180000,\n                source: \"local\",\n                description: \"Heavy monsoon showers have caused waterlogging and flooding in several parts of Kolkata, disrupting normal life.\",\n                url: \"https://ndma.gov.in/\"\n            },\n            {\n                id: \"india-flood-uttarakhand-2025\",\n                type: \"flood\",\n                title: \"Mountain Flash Floods in Uttarakhand\",\n                location: {\n                    lat: 30.0668,\n                    lng: 79.0193\n                },\n                magnitude: 7.9,\n                time: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n                severity: \"critical\",\n                affected: 85000,\n                source: \"local\",\n                description: \"Cloud burst and heavy rains in the hills have triggered flash floods in several districts of Uttarakhand. Pilgrimage routes affected.\",\n                url: \"https://ndma.gov.in/\"\n            },\n            {\n                id: \"india-flood-maharashtra-2025\",\n                type: \"flood\",\n                title: \"River Flooding in Western Maharashtra\",\n                location: {\n                    lat: 18.5204,\n                    lng: 73.8567\n                },\n                magnitude: 6.5,\n                time: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(),\n                severity: \"medium\",\n                affected: 125000,\n                source: \"local\",\n                description: \"Rising water levels in rivers due to heavy upstream rainfall have caused flooding in agricultural areas of Maharashtra.\",\n                url: \"https://ndma.gov.in/\"\n            }\n        ];\n        // Add India flood data to disasters array\n        disasters.push(...currentIndiaFloods);\n        // Add current India weather alerts and monsoon warnings\n        const currentIndiaWeatherAlerts = [\n            {\n                id: \"india-weather-red-alert-2025\",\n                type: \"storm\",\n                title: \"Red Alert: Heavy Rainfall Warning for North India\",\n                location: {\n                    lat: 28.7041,\n                    lng: 77.1025\n                },\n                magnitude: 8.2,\n                time: new Date().toISOString(),\n                severity: \"critical\",\n                affected: 1500000,\n                source: \"weather\",\n                description: \"IMD has issued a red alert for extremely heavy rainfall in Delhi, Punjab, Haryana, and UP. Potential for severe flooding and disruption.\",\n                url: \"https://mausam.imd.gov.in/\"\n            },\n            {\n                id: \"india-weather-cyclone-warning-2025\",\n                type: \"hurricane\",\n                title: \"Cyclone Alert: Bay of Bengal Depression\",\n                location: {\n                    lat: 13.0827,\n                    lng: 80.2707\n                },\n                magnitude: 7.8,\n                time: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n                severity: \"high\",\n                affected: 850000,\n                source: \"weather\",\n                description: \"Low pressure system in Bay of Bengal intensifying. Coastal areas of Tamil Nadu and Andhra Pradesh on high alert.\",\n                url: \"https://mausam.imd.gov.in/\"\n            },\n            {\n                id: \"india-weather-heat-wave-2025\",\n                type: \"heatwave\",\n                title: \"Heat Wave Conditions in Rajasthan\",\n                location: {\n                    lat: 26.9124,\n                    lng: 75.7873\n                },\n                magnitude: 6.9,\n                time: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n                severity: \"medium\",\n                affected: 320000,\n                source: \"weather\",\n                description: \"Severe heat wave conditions prevailing in western Rajasthan with temperatures reaching 47°C. Health advisory issued.\",\n                url: \"https://mausam.imd.gov.in/\"\n            }\n        ];\n        // Add weather alerts to disasters array\n        disasters.push(...currentIndiaWeatherAlerts);\n        // Helper function to generate estimated coordinates\n        function generateEstimatedCoordinates(title, description) {\n            const content = `${title} ${description}`.toLowerCase();\n            // Comprehensive location mapping with better India coverage\n            const locationMap = {\n                // United States\n                'california': {\n                    lat: 36.7783,\n                    lng: -119.4179\n                },\n                'florida': {\n                    lat: 27.7663,\n                    lng: -82.6404\n                },\n                'texas': {\n                    lat: 31.9686,\n                    lng: -99.9018\n                },\n                'new york': {\n                    lat: 40.7128,\n                    lng: -74.0060\n                },\n                'alaska': {\n                    lat: 61.2181,\n                    lng: -149.9003\n                },\n                'hawaii': {\n                    lat: 21.0943,\n                    lng: -157.4983\n                },\n                // India - comprehensive coverage\n                'india': {\n                    lat: 20.5937,\n                    lng: 78.9629\n                },\n                'delhi': {\n                    lat: 28.7041,\n                    lng: 77.1025\n                },\n                'mumbai': {\n                    lat: 19.0760,\n                    lng: 72.8777\n                },\n                'kolkata': {\n                    lat: 22.5726,\n                    lng: 88.3639\n                },\n                'chennai': {\n                    lat: 13.0827,\n                    lng: 80.2707\n                },\n                'bangalore': {\n                    lat: 12.9716,\n                    lng: 77.5946\n                },\n                'hyderabad': {\n                    lat: 17.3850,\n                    lng: 78.4867\n                },\n                'pune': {\n                    lat: 18.5204,\n                    lng: 73.8567\n                },\n                'ahmedabad': {\n                    lat: 23.0225,\n                    lng: 72.5714\n                },\n                'jaipur': {\n                    lat: 26.9124,\n                    lng: 75.7873\n                },\n                'lucknow': {\n                    lat: 26.8467,\n                    lng: 80.9462\n                },\n                'kanpur': {\n                    lat: 26.4499,\n                    lng: 80.3319\n                },\n                'nagpur': {\n                    lat: 21.1458,\n                    lng: 79.0882\n                },\n                'guwahati': {\n                    lat: 26.2006,\n                    lng: 92.9376\n                },\n                'patna': {\n                    lat: 25.0961,\n                    lng: 85.3131\n                },\n                'bhopal': {\n                    lat: 23.2599,\n                    lng: 77.4126\n                },\n                'visakhapatnam': {\n                    lat: 17.6868,\n                    lng: 83.2185\n                },\n                'vadodara': {\n                    lat: 22.3072,\n                    lng: 73.1812\n                },\n                'ludhiana': {\n                    lat: 30.9010,\n                    lng: 75.8573\n                },\n                'agra': {\n                    lat: 27.1767,\n                    lng: 78.0081\n                },\n                'nashik': {\n                    lat: 19.9975,\n                    lng: 73.7898\n                },\n                'faridabad': {\n                    lat: 28.4089,\n                    lng: 77.3178\n                },\n                'meerut': {\n                    lat: 28.9845,\n                    lng: 77.7064\n                },\n                'rajkot': {\n                    lat: 22.3039,\n                    lng: 70.8022\n                },\n                'kalyan': {\n                    lat: 19.2403,\n                    lng: 73.1305\n                },\n                'vasai': {\n                    lat: 19.4881,\n                    lng: 72.8059\n                },\n                'varanasi': {\n                    lat: 25.3176,\n                    lng: 82.9739\n                },\n                'srinagar': {\n                    lat: 34.0837,\n                    lng: 74.7973\n                },\n                'dehradun': {\n                    lat: 30.3165,\n                    lng: 78.0322\n                },\n                'chandigarh': {\n                    lat: 30.7333,\n                    lng: 76.7794\n                },\n                'shimla': {\n                    lat: 31.1048,\n                    lng: 77.1734\n                },\n                'jammu': {\n                    lat: 32.7266,\n                    lng: 74.8570\n                },\n                'kerala': {\n                    lat: 10.8505,\n                    lng: 76.2711\n                },\n                'goa': {\n                    lat: 15.2993,\n                    lng: 74.1240\n                },\n                'assam': {\n                    lat: 26.2006,\n                    lng: 92.9376\n                },\n                'bihar': {\n                    lat: 25.0961,\n                    lng: 85.3131\n                },\n                'west bengal': {\n                    lat: 22.5726,\n                    lng: 88.3639\n                },\n                'uttar pradesh': {\n                    lat: 26.8467,\n                    lng: 80.9462\n                },\n                'maharashtra': {\n                    lat: 19.7515,\n                    lng: 75.7139\n                },\n                'rajasthan': {\n                    lat: 27.0238,\n                    lng: 74.2179\n                },\n                'tamil nadu': {\n                    lat: 11.1271,\n                    lng: 78.6569\n                },\n                'karnataka': {\n                    lat: 15.3173,\n                    lng: 75.7139\n                },\n                'gujarat': {\n                    lat: 22.2587,\n                    lng: 71.1924\n                },\n                'odisha': {\n                    lat: 20.9517,\n                    lng: 85.0985\n                },\n                'telangana': {\n                    lat: 18.1124,\n                    lng: 79.0193\n                },\n                'punjab': {\n                    lat: 31.1471,\n                    lng: 75.3412\n                },\n                'haryana': {\n                    lat: 29.0588,\n                    lng: 76.0856\n                },\n                'himachal pradesh': {\n                    lat: 31.1048,\n                    lng: 77.1734\n                },\n                'uttarakhand': {\n                    lat: 30.0668,\n                    lng: 79.0193\n                },\n                'jharkhand': {\n                    lat: 23.6102,\n                    lng: 85.2799\n                },\n                'chhattisgarh': {\n                    lat: 21.2787,\n                    lng: 81.8661\n                },\n                'manipur': {\n                    lat: 24.6637,\n                    lng: 93.9063\n                },\n                'meghalaya': {\n                    lat: 25.4670,\n                    lng: 91.3662\n                },\n                'tripura': {\n                    lat: 23.9408,\n                    lng: 91.9882\n                },\n                'mizoram': {\n                    lat: 23.1645,\n                    lng: 92.9376\n                },\n                'arunachal pradesh': {\n                    lat: 28.2180,\n                    lng: 94.7278\n                },\n                'nagaland': {\n                    lat: 26.1584,\n                    lng: 94.5624\n                },\n                'sikkim': {\n                    lat: 27.5330,\n                    lng: 88.5122\n                },\n                // Other Asian countries\n                'japan': {\n                    lat: 36.2048,\n                    lng: 138.2529\n                },\n                'china': {\n                    lat: 35.8617,\n                    lng: 104.1954\n                },\n                'indonesia': {\n                    lat: -0.7893,\n                    lng: 113.9213\n                },\n                'philippines': {\n                    lat: 12.8797,\n                    lng: 121.7740\n                },\n                'thailand': {\n                    lat: 15.8700,\n                    lng: 100.9925\n                },\n                'vietnam': {\n                    lat: 14.0583,\n                    lng: 108.2772\n                },\n                'malaysia': {\n                    lat: 4.2105,\n                    lng: 101.9758\n                },\n                'singapore': {\n                    lat: 1.3521,\n                    lng: 103.8198\n                },\n                'south korea': {\n                    lat: 35.9078,\n                    lng: 127.7669\n                },\n                'north korea': {\n                    lat: 40.3399,\n                    lng: 127.5101\n                },\n                'myanmar': {\n                    lat: 21.9162,\n                    lng: 95.9560\n                },\n                'bangladesh': {\n                    lat: 23.6850,\n                    lng: 90.3563\n                },\n                'pakistan': {\n                    lat: 30.3753,\n                    lng: 69.3451\n                },\n                'sri lanka': {\n                    lat: 7.8731,\n                    lng: 80.7718\n                },\n                'nepal': {\n                    lat: 28.3949,\n                    lng: 84.1240\n                },\n                'bhutan': {\n                    lat: 27.5142,\n                    lng: 90.4336\n                },\n                'afghanistan': {\n                    lat: 33.9391,\n                    lng: 67.7100\n                },\n                // Australia and Oceania\n                'australia': {\n                    lat: -25.2744,\n                    lng: 133.7751\n                },\n                'new zealand': {\n                    lat: -40.9006,\n                    lng: 174.8860\n                },\n                // Europe\n                'italy': {\n                    lat: 41.8719,\n                    lng: 12.5674\n                },\n                'turkey': {\n                    lat: 38.9637,\n                    lng: 35.2433\n                },\n                'greece': {\n                    lat: 39.0742,\n                    lng: 21.8243\n                },\n                'spain': {\n                    lat: 40.4637,\n                    lng: -3.7492\n                },\n                'france': {\n                    lat: 46.6034,\n                    lng: 1.8883\n                },\n                'germany': {\n                    lat: 51.1657,\n                    lng: 10.4515\n                },\n                'united kingdom': {\n                    lat: 55.3781,\n                    lng: -3.4360\n                },\n                'portugal': {\n                    lat: 39.3999,\n                    lng: -8.2245\n                },\n                // Americas\n                'mexico': {\n                    lat: 23.6345,\n                    lng: -102.5528\n                },\n                'brazil': {\n                    lat: -14.2350,\n                    lng: -51.9253\n                },\n                'chile': {\n                    lat: -35.6751,\n                    lng: -71.5430\n                },\n                'peru': {\n                    lat: -9.1900,\n                    lng: -75.0152\n                },\n                'colombia': {\n                    lat: 4.5709,\n                    lng: -74.2973\n                },\n                'argentina': {\n                    lat: -38.4161,\n                    lng: -63.6167\n                },\n                'canada': {\n                    lat: 56.1304,\n                    lng: -106.3468\n                },\n                // Africa\n                'south africa': {\n                    lat: -30.5595,\n                    lng: 22.9375\n                },\n                'egypt': {\n                    lat: 26.0975,\n                    lng: 31.2357\n                },\n                'nigeria': {\n                    lat: 9.0820,\n                    lng: 8.6753\n                },\n                'kenya': {\n                    lat: -0.0236,\n                    lng: 37.9062\n                },\n                'morocco': {\n                    lat: 31.7917,\n                    lng: -7.0926\n                }\n            };\n            for (const [location, coords] of Object.entries(locationMap)){\n                if (content.includes(location)) {\n                    return coords;\n                }\n            }\n            // Default to somewhere in the Pacific if no location found\n            return {\n                lat: 0,\n                lng: 0\n            };\n        }\n        // Helper function to estimate magnitude based on content\n        function getEstimatedMagnitude(content, type) {\n            if (type === 'earthquake') {\n                if (content.includes('magnitude')) {\n                    const match = content.match(/magnitude\\s*(\\d+\\.?\\d*)/i);\n                    if (match) return parseFloat(match[1]);\n                }\n                return content.includes('major') ? 7.5 : content.includes('strong') ? 6.5 : 5.5;\n            } else if (type === 'hurricane') {\n                if (content.includes('category 5')) return 5;\n                if (content.includes('category 4')) return 4;\n                if (content.includes('category 3')) return 3;\n                if (content.includes('category 2')) return 2;\n                if (content.includes('category 1')) return 1;\n                return 3;\n            } else if (type === 'wildfire') {\n                return content.includes('massive') ? 8 : content.includes('large') ? 6 : 4;\n            }\n            return 5;\n        }\n        // Helper function to estimate affected people\n        function getEstimatedAffected(content, type) {\n            if (content.includes('thousands')) return Math.floor(Math.random() * 50000) + 10000;\n            if (content.includes('hundreds')) return Math.floor(Math.random() * 5000) + 1000;\n            if (content.includes('dozens')) return Math.floor(Math.random() * 500) + 100;\n            if (content.includes('evacuate')) return Math.floor(Math.random() * 100000) + 20000;\n            if (content.includes('emergency')) return Math.floor(Math.random() * 50000) + 10000;\n            // Default estimates based on disaster type\n            switch(type){\n                case 'earthquake':\n                    return Math.floor(Math.random() * 100000) + 50000;\n                case 'hurricane':\n                    return Math.floor(Math.random() * 200000) + 100000;\n                case 'wildfire':\n                    return Math.floor(Math.random() * 50000) + 10000;\n                case 'flood':\n                    return Math.floor(Math.random() * 75000) + 25000;\n                case 'tornado':\n                    return Math.floor(Math.random() * 10000) + 5000;\n                case 'tsunami':\n                    return Math.floor(Math.random() * 150000) + 75000;\n                default:\n                    return Math.floor(Math.random() * 25000) + 5000;\n            }\n        }\n        // Sort by time (most recent first)\n        disasters.sort((a, b)=>new Date(b.time).getTime() - new Date(a.time).getTime());\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            disasters: disasters.slice(0, 30),\n            lastUpdated: new Date().toISOString(),\n            sources: [\n                \"NASA EONET\",\n                \"USGS\",\n                \"OpenWeatherMap\",\n                \"NewsAPI\"\n            ],\n            apiStatus: {\n                nasa: nasaEvents.length > 0,\n                usgs: usgsResult.error ? usgsResult.error : usgsResult.data.length > 0,\n                weather: weatherData.length > 0,\n                news: newsArticles.length > 0\n            },\n            count: disasters.length\n        });\n    } catch (error) {\n        console.error(\"API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to fetch disaster data\",\n            disasters: [],\n            apiStatus: {\n                nasa: false,\n                usgs: false,\n                weather: false,\n                news: false\n            },\n            count: 0\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/disasters/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/disaster-api.ts":
/*!*****************************!*\
  !*** ./lib/disaster-api.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchDisasterNews: () => (/* binding */ fetchDisasterNews),\n/* harmony export */   fetchEarthquakeData: () => (/* binding */ fetchEarthquakeData),\n/* harmony export */   fetchWeatherAlerts: () => (/* binding */ fetchWeatherAlerts),\n/* harmony export */   fetchWildfireData: () => (/* binding */ fetchWildfireData),\n/* harmony export */   generateMockHurricanes: () => (/* binding */ generateMockHurricanes),\n/* harmony export */   generateMockWildfires: () => (/* binding */ generateMockWildfires),\n/* harmony export */   transformEarthquakeData: () => (/* binding */ transformEarthquakeData)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n\n// USGS Earthquake API (Free, no key required)\nconst fetchEarthquakeData = async (minMagnitude = 4.0, daysBack = 7)=>{\n    try {\n        const endtime = new Date().toISOString();\n        const starttime = new Date(Date.now() - daysBack * 24 * 60 * 60 * 1000).toISOString();\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://earthquake.usgs.gov/fdsnws/event/1/query`, {\n            params: {\n                format: 'geojson',\n                starttime: starttime,\n                endtime: endtime,\n                minmagnitude: minMagnitude,\n                limit: 100,\n                orderby: 'time-asc'\n            },\n            timeout: 10000\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching earthquake data:', error);\n        throw error;\n    }\n};\n// NASA FIRMS Wildfire API (Free, no key required)\nconst fetchWildfireData = async ()=>{\n    try {\n        const today = new Date();\n        const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);\n        const dateStr = yesterday.toISOString().split('T')[0];\n        // Using NASA FIRMS MODIS data (free, no API key required)\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://firms.modaps.eosdis.nasa.gov/data/active_fire/modis-c6.1/csv/MODIS_C6_1_Global_24h.csv`, {\n            timeout: 10000\n        });\n        // Parse CSV data\n        const lines = response.data.split('\\n');\n        const headers = lines[0].split(',');\n        const wildfires = [];\n        for(let i = 1; i < Math.min(lines.length, 50); i++){\n            const values = lines[i].split(',');\n            if (values.length >= 9) {\n                wildfires.push({\n                    id: `wildfire-${i}`,\n                    type: 'wildfire',\n                    title: `Active Fire - ${values[7] || 'Unknown Location'}`,\n                    location: {\n                        lat: parseFloat(values[0]) || 0,\n                        lng: parseFloat(values[1]) || 0\n                    },\n                    magnitude: parseFloat(values[8]) || 300,\n                    time: new Date().toISOString(),\n                    severity: parseFloat(values[8]) > 350 ? 'critical' : parseFloat(values[8]) > 320 ? 'high' : 'medium',\n                    affected: Math.floor(Math.random() * 5000 + 100),\n                    description: `Active fire detected via satellite. Brightness: ${values[8]}`,\n                    url: 'https://firms.modaps.eosdis.nasa.gov/',\n                    source: 'nasa'\n                });\n            }\n        }\n        return wildfires.slice(0, 20) // Limit to 20 most recent\n        ;\n    } catch (error) {\n        console.error('Error fetching wildfire data:', error);\n        return [];\n    }\n};\n// OpenWeatherMap API for severe weather\nconst fetchWeatherAlerts = async ()=>{\n    const apiKey = process.env.OPENWEATHER_API_KEY;\n    if (!apiKey || apiKey === 'your_openweather_api_key_here') {\n        console.warn('OpenWeatherMap API key not configured');\n        return [];\n    }\n    try {\n        // Get weather alerts for major cities\n        const cities = [\n            {\n                name: 'New York',\n                lat: 40.7128,\n                lon: -74.0060\n            },\n            {\n                name: 'Los Angeles',\n                lat: 34.0522,\n                lon: -118.2437\n            },\n            {\n                name: 'Chicago',\n                lat: 41.8781,\n                lon: -87.6298\n            },\n            {\n                name: 'Houston',\n                lat: 29.7604,\n                lon: -95.3698\n            },\n            {\n                name: 'Miami',\n                lat: 25.7617,\n                lon: -80.1918\n            },\n            {\n                name: 'London',\n                lat: 51.5074,\n                lon: -0.1278\n            },\n            {\n                name: 'Tokyo',\n                lat: 35.6762,\n                lon: 139.6503\n            },\n            {\n                name: 'Sydney',\n                lat: -33.8688,\n                lon: 151.2093\n            }\n        ];\n        const weatherAlerts = [];\n        for (const city of cities.slice(0, 4)){\n            try {\n                const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://api.openweathermap.org/data/2.5/onecall`, {\n                    params: {\n                        lat: city.lat,\n                        lon: city.lon,\n                        appid: apiKey,\n                        exclude: 'minutely,hourly,daily'\n                    },\n                    timeout: 5000\n                });\n                if (response.data.alerts && response.data.alerts.length > 0) {\n                    response.data.alerts.forEach((alert, index)=>{\n                        weatherAlerts.push({\n                            id: `weather-${city.name}-${index}`,\n                            type: alert.event.toLowerCase().includes('hurricane') ? 'hurricane' : alert.event.toLowerCase().includes('tornado') ? 'tornado' : alert.event.toLowerCase().includes('flood') ? 'flood' : 'severe_weather',\n                            title: `${alert.event} - ${city.name}`,\n                            location: {\n                                lat: city.lat,\n                                lng: city.lon\n                            },\n                            magnitude: 3.5,\n                            time: new Date(alert.start * 1000).toISOString(),\n                            severity: alert.event.toLowerCase().includes('warning') ? 'high' : 'medium',\n                            affected: Math.floor(Math.random() * 50000 + 1000),\n                            description: alert.description,\n                            url: '#',\n                            source: 'weather'\n                        });\n                    });\n                }\n            } catch (err) {\n                console.warn(`Weather API failed for ${city.name}:`, err);\n            }\n        }\n        return weatherAlerts;\n    } catch (error) {\n        console.error('Error fetching weather alerts:', error);\n        return [];\n    }\n};\n// News API (Requires free API key) - Strictly disaster-focused\nconst fetchDisasterNews = async (query = 'earthquake OR hurricane OR wildfire OR flood OR tornado OR tsunami OR cyclone OR \"natural disaster\" OR \"emergency evacuation\" OR \"disaster zone\"')=>{\n    const apiKey = process.env.NEWS_API_KEY;\n    if (!apiKey || apiKey === 'your_news_api_key_here') {\n        console.warn('News API key not configured');\n        return {\n            articles: []\n        };\n    }\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://newsapi.org/v2/everything`, {\n            params: {\n                q: query,\n                sortBy: 'publishedAt',\n                language: 'en',\n                pageSize: 20,\n                from: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n                apiKey\n            },\n            timeout: 10000\n        });\n        // Filter out articles that are clearly not disaster-related\n        const disasterKeywords = [\n            'earthquake',\n            'hurricane',\n            'wildfire',\n            'flood',\n            'tornado',\n            'tsunami',\n            'cyclone',\n            'disaster',\n            'evacuation',\n            'emergency',\n            'storm',\n            'fire',\n            'flooding',\n            'quake',\n            'typhoon',\n            'blizzard',\n            'landslide',\n            'avalanche'\n        ];\n        const filteredArticles = response.data.articles.filter((article)=>{\n            const titleAndDesc = `${article.title} ${article.description}`.toLowerCase();\n            return disasterKeywords.some((keyword)=>titleAndDesc.includes(keyword));\n        });\n        return {\n            articles: filteredArticles\n        };\n    } catch (error) {\n        console.error('Error fetching disaster news:', error);\n        return {\n            articles: []\n        };\n    }\n};\n// Transform earthquake data to disaster format\nconst transformEarthquakeData = (earthquakeData)=>{\n    return earthquakeData.features.map((feature)=>{\n        const { properties, geometry } = feature;\n        const [lon, lat] = geometry.coordinates;\n        // Determine severity based on magnitude\n        let severity = 'low';\n        if (properties.mag >= 7) severity = 'critical';\n        else if (properties.mag >= 6) severity = 'high';\n        else if (properties.mag >= 5) severity = 'medium';\n        // Estimate affected people (rough calculation based on magnitude and population density)\n        const affected = Math.floor(Math.pow(properties.mag, 3) * Math.random() * 1000);\n        return {\n            id: feature.id,\n            type: 'earthquake',\n            title: properties.title,\n            location: {\n                lat,\n                lng: lon\n            },\n            magnitude: properties.mag,\n            time: new Date(properties.time).toISOString(),\n            severity,\n            affected,\n            description: `${properties.place} - Magnitude ${properties.mag} earthquake`,\n            url: properties.url,\n            source: 'usgs'\n        };\n    });\n};\n// Mock data for other disaster types (you can replace these with real APIs)\nconst generateMockWildfires = ()=>{\n    const wildfires = [\n        {\n            location: {\n                lat: 34.0522,\n                lng: -118.2437\n            },\n            title: 'Thomas Fire',\n            severity: 'high'\n        },\n        {\n            location: {\n                lat: 37.7749,\n                lng: -122.4194\n            },\n            title: 'North Bay Fire',\n            severity: 'medium'\n        },\n        {\n            location: {\n                lat: 45.5152,\n                lng: -122.6784\n            },\n            title: 'Eagle Creek Fire',\n            severity: 'critical'\n        }\n    ];\n    return wildfires.map((fire, index)=>({\n            id: `wildfire-${index}`,\n            type: 'wildfire',\n            title: fire.title,\n            location: fire.location,\n            magnitude: Math.random() * 5 + 1,\n            time: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),\n            severity: fire.severity,\n            affected: Math.floor(Math.random() * 50000 + 1000),\n            description: `Active wildfire in the ${fire.title} area`,\n            url: '#'\n        }));\n};\nconst generateMockHurricanes = ()=>{\n    const hurricanes = [\n        {\n            location: {\n                lat: 25.7617,\n                lng: -80.1918\n            },\n            title: 'Hurricane Maria',\n            severity: 'critical'\n        },\n        {\n            location: {\n                lat: 29.7604,\n                lng: -95.3698\n            },\n            title: 'Hurricane Harvey',\n            severity: 'high'\n        }\n    ];\n    return hurricanes.map((hurricane, index)=>({\n            id: `hurricane-${index}`,\n            type: 'hurricane',\n            title: hurricane.title,\n            location: hurricane.location,\n            magnitude: Math.random() * 2 + 3,\n            time: new Date(Date.now() - Math.random() * 3 * 24 * 60 * 60 * 1000).toISOString(),\n            severity: hurricane.severity,\n            affected: Math.floor(Math.random() * 500000 + 10000),\n            description: `Active hurricane system in the Atlantic`,\n            url: '#'\n        }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/disaster-api.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdisasters%2Froute&page=%2Fapi%2Fdisasters%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdisasters%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdisasters%2Froute&page=%2Fapi%2Fdisasters%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdisasters%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_ASUS_Downloads_disaster_dashboard_app_api_disasters_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/disasters/route.ts */ \"(rsc)/./app/api/disasters/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/disasters/route\",\n        pathname: \"/api/disasters\",\n        filename: \"route\",\n        bundlePath: \"app/api/disasters/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\ASUS\\\\Downloads\\\\disaster-dashboard\\\\app\\\\api\\\\disasters\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_ASUS_Downloads_disaster_dashboard_app_api_disasters_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZkaXNhc3RlcnMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmRpc2FzdGVycyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmRpc2FzdGVycyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNBU1VTJTVDRG93bmxvYWRzJTVDZGlzYXN0ZXItZGFzaGJvYXJkJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNBU1VTJTVDRG93bmxvYWRzJTVDZGlzYXN0ZXItZGFzaGJvYXJkJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUM2QjtBQUMxRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcQVNVU1xcXFxEb3dubG9hZHNcXFxcZGlzYXN0ZXItZGFzaGJvYXJkXFxcXGFwcFxcXFxhcGlcXFxcZGlzYXN0ZXJzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9kaXNhc3RlcnMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kaXNhc3RlcnNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2Rpc2FzdGVycy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXEFTVVNcXFxcRG93bmxvYWRzXFxcXGRpc2FzdGVyLWRhc2hib2FyZFxcXFxhcHBcXFxcYXBpXFxcXGRpc2FzdGVyc1xcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdisasters%2Froute&page=%2Fapi%2Fdisasters%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdisasters%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?4c03":
/*!***********************!*\
  !*** debug (ignored) ***!
  \***********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/axios","vendor-chunks/asynckit","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/call-bind-apply-helpers","vendor-chunks/get-proto","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/proxy-from-env","vendor-chunks/mime-types","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdisasters%2Froute&page=%2Fapi%2Fdisasters%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdisasters%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CDownloads%5Cdisaster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();